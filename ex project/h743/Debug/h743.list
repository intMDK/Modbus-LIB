
h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08007f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b4  24000090  08007fb4  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000344  08007fb4  00020344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011fbf  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000021b6  00000000  00000000  0003207d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b40  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a78  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f88  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011335  00000000  00000000  0006b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155bb8  00000000  00000000  0007caad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d2665  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d9c  00000000  00000000  001d26b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000090 	.word	0x24000090
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007c44 	.word	0x08007c44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000094 	.word	0x24000094
 80002d4:	08007c44 	.word	0x08007c44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
	if (RxData[0] == SLAVE_ID)
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <HAL_UARTEx_RxEventCallback+0xb4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b07      	cmp	r3, #7
 80005ee:	d143      	bne.n	8000678 <HAL_UARTEx_RxEventCallback+0x9c>
	{
		switch (RxData[1]){
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_UARTEx_RxEventCallback+0xb4>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d83a      	bhi.n	8000670 <HAL_UARTEx_RxEventCallback+0x94>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <HAL_UARTEx_RxEventCallback+0x24>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	0800064d 	.word	0x0800064d
 8000604:	08000653 	.word	0x08000653
 8000608:	08000641 	.word	0x08000641
 800060c:	08000647 	.word	0x08000647
 8000610:	08000665 	.word	0x08000665
 8000614:	08000659 	.word	0x08000659
 8000618:	08000671 	.word	0x08000671
 800061c:	08000671 	.word	0x08000671
 8000620:	08000671 	.word	0x08000671
 8000624:	08000671 	.word	0x08000671
 8000628:	08000671 	.word	0x08000671
 800062c:	08000671 	.word	0x08000671
 8000630:	08000671 	.word	0x08000671
 8000634:	08000671 	.word	0x08000671
 8000638:	0800066b 	.word	0x0800066b
 800063c:	0800065f 	.word	0x0800065f
		case 0x03:
			readHoldingRegs();
 8000640:	f000 f9a0 	bl	8000984 <readHoldingRegs>
			break;
 8000644:	e019      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x04:
			readInputRegs();
 8000646:	f000 fa0f 	bl	8000a68 <readInputRegs>
			break;
 800064a:	e016      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x01:
			readCoils();
 800064c:	f000 fa7e 	bl	8000b4c <readCoils>
			break;
 8000650:	e013      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x02:
			readInputs();
 8000652:	f000 fb29 	bl	8000ca8 <readInputs>
			break;
 8000656:	e010      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x06:
			writeSingleReg();
 8000658:	f000 fc4e 	bl	8000ef8 <writeSingleReg>
			break;
 800065c:	e00d      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x10:
			writeHoldingRegs();
 800065e:	f000 fbd1 	bl	8000e04 <writeHoldingRegs>
			break;
 8000662:	e00a      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x05:
			writeSingleCoil();
 8000664:	f000 fc92 	bl	8000f8c <writeSingleCoil>
			break;
 8000668:	e007      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		case 0x0F:
			writeMultiCoils();
 800066a:	f000 fd09 	bl	8001080 <writeMultiCoils>
			break;
 800066e:	e004      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		default:
			modbusException(ILLEGAL_FUNCTION);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 f967 	bl	8000944 <modbusException>
			break;
 8000676:	e000      	b.n	800067a <HAL_UARTEx_RxEventCallback+0x9e>
		}
	}
 8000678:	bf00      	nop

	HAL_UARTEx_ReceiveToIdle_IT(&huart5, RxData, 256);
 800067a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067e:	4904      	ldr	r1, [pc, #16]	; (8000690 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000682:	f007 fa14 	bl	8007aae <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	24000140 	.word	0x24000140
 8000694:	240000ac 	.word	0x240000ac

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 ff4e 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f810 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f8d6 	bl	8000854 <MX_GPIO_Init>
  MX_UART5_Init();
 80006a8:	f000 f888 	bl	80007bc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart5, RxData, 256);
 80006ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b0:	4902      	ldr	r1, [pc, #8]	; (80006bc <main+0x24>)
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <main+0x28>)
 80006b4:	f007 f9fb 	bl	8007aae <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x20>
 80006ba:	bf00      	nop
 80006bc:	24000140 	.word	0x24000140
 80006c0:	240000ac 	.word	0x240000ac

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	; 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	224c      	movs	r2, #76	; 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 faae 	bl	8007c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 faa8 	bl	8007c34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f002 f805 	bl	80026f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <SystemClock_Config+0xf0>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <SystemClock_Config+0xf0>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <SystemClock_Config+0xf0>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xf4>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <SystemClock_Config+0xf4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemClock_Config+0xf4>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000720:	bf00      	nop
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <SystemClock_Config+0xf4>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072e:	d1f8      	bne.n	8000722 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000734:	2301      	movs	r3, #1
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000748:	230a      	movs	r3, #10
 800074a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000758:	230c      	movs	r3, #12
 800075a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800075c:	2302      	movs	r3, #2
 800075e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fffd 	bl	8002768 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000774:	f000 f8b4 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	233f      	movs	r3, #63	; 0x3f
 800077a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2303      	movs	r3, #3
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800078c:	2340      	movs	r3, #64	; 0x40
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fc3d 	bl	800301c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007a8:	f000 f89a 	bl	80008e0 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3770      	adds	r7, #112	; 0x70
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58000400 	.word	0x58000400
 80007b8:	58024800 	.word	0x58024800

080007bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_UART5_Init+0x90>)
 80007c2:	4a23      	ldr	r2, [pc, #140]	; (8000850 <MX_UART5_Init+0x94>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_UART5_Init+0x90>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_UART5_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_UART5_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_UART5_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_UART5_Init+0x90>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_UART5_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_UART5_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_UART5_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_UART5_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_UART5_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_UART5_Init+0x90>)
 8000806:	f004 fdc1 	bl	800538c <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000810:	f000 f866 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_UART5_Init+0x90>)
 8000818:	f007 f8cd 	bl	80079b6 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f85d 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_UART5_Init+0x90>)
 800082a:	f007 f902 	bl	8007a32 <HAL_UARTEx_SetRxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 f854 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_UART5_Init+0x90>)
 800083a:	f007 f883 	bl	8007944 <HAL_UARTEx_DisableFifoMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f84c 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240000ac 	.word	0x240000ac
 8000850:	40005000 	.word	0x40005000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_GPIO_Init+0x84>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <MX_GPIO_Init+0x84>)
 8000872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_GPIO_Init+0x84>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_GPIO_Init+0x84>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_GPIO_Init+0x84>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_GPIO_Init+0x84>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0x88>)
 80008ae:	f001 ff07 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0x88>)
 80008cc:	f001 fd48 	bl	8002360 <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58020400 	.word	0x58020400

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <sendData>:
extern uint8_t TxData[256];
extern UART_HandleTypeDef huart5;


void sendData (uint8_t *data, int size)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 fc75 	bl	80011ec <crc16>
 8000902:	4603      	mov	r3, r0
 8000904:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	89fa      	ldrh	r2, [r7, #14]
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	b299      	uxth	r1, r3
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	b2ca      	uxtb	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart5, data, size+2, 1000);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	3302      	adds	r3, #2
 800092a:	b29a      	uxth	r2, r3
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <sendData+0x54>)
 8000934:	f004 fd7a 	bl	800542c <HAL_UART_Transmit>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	240000ac 	.word	0x240000ac

08000944 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <modbusException+0x38>)
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <modbusException+0x3c>)
 8000954:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <modbusException+0x38>)
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <modbusException+0x3c>)
 8000962:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <modbusException+0x3c>)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 800096a:	2103      	movs	r1, #3
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <modbusException+0x3c>)
 800096e:	f7ff ffbd 	bl	80008ec <sendData>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24000140 	.word	0x24000140
 8000980:	24000240 	.word	0x24000240

08000984 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800098a:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <readHoldingRegs+0xd8>)
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <readHoldingRegs+0xd8>)
 8000994:	78db      	ldrb	r3, [r3, #3]
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <readHoldingRegs+0xd8>)
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	021b      	lsls	r3, r3, #8
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <readHoldingRegs+0xd8>)
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <readHoldingRegs+0x3a>
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	2b7d      	cmp	r3, #125	; 0x7d
 80009bc:	d904      	bls.n	80009c8 <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff ffc0 	bl	8000944 <modbusException>
		return 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	e044      	b.n	8000a52 <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 80009c8:	89fa      	ldrh	r2, [r7, #14]
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	4413      	add	r3, r2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	3b01      	subs	r3, #1
 80009d2:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80009d4:	883b      	ldrh	r3, [r7, #0]
 80009d6:	2b31      	cmp	r3, #49	; 0x31
 80009d8:	d904      	bls.n	80009e4 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80009da:	2002      	movs	r0, #2
 80009dc:	f7ff ffb2 	bl	8000944 <modbusException>
		return 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	e036      	b.n	8000a52 <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <readHoldingRegs+0xdc>)
 80009e6:	2207      	movs	r2, #7
 80009e8:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <readHoldingRegs+0xd8>)
 80009ec:	785a      	ldrb	r2, [r3, #1]
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <readHoldingRegs+0xdc>)
 80009f0:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <readHoldingRegs+0xdc>)
 80009fc:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80009fe:	2303      	movs	r3, #3
 8000a00:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	e01b      	b.n	8000a40 <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <readHoldingRegs+0xe0>)
 8000a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b299      	uxth	r1, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2c9      	uxtb	r1, r1
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <readHoldingRegs+0xdc>)
 8000a1e:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8000a20:	89fb      	ldrh	r3, [r7, #14]
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <readHoldingRegs+0xe0>)
 8000a24:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2c9      	uxtb	r1, r1
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <readHoldingRegs+0xdc>)
 8000a32:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	3301      	adds	r3, #1
 8000a38:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbdf      	blt.n	8000a08 <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <readHoldingRegs+0xdc>)
 8000a4c:	f7ff ff4e 	bl	80008ec <sendData>
	return 1;   // success
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	24000140 	.word	0x24000140
 8000a60:	24000240 	.word	0x24000240
 8000a64:	24000000 	.word	0x24000000

08000a68 <readInputRegs>:

uint8_t readInputRegs (void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <readInputRegs+0xd8>)
 8000a70:	789b      	ldrb	r3, [r3, #2]
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <readInputRegs+0xd8>)
 8000a78:	78db      	ldrb	r3, [r3, #3]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <readInputRegs+0xd8>)
 8000a84:	791b      	ldrb	r3, [r3, #4]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <readInputRegs+0xd8>)
 8000a8c:	795b      	ldrb	r3, [r3, #5]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <readInputRegs+0x3a>
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	2b7d      	cmp	r3, #125	; 0x7d
 8000aa0:	d904      	bls.n	8000aac <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f7ff ff4e 	bl	8000944 <modbusException>
		return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e044      	b.n	8000b36 <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000aac:	89fa      	ldrh	r2, [r7, #14]
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000ab8:	883b      	ldrh	r3, [r7, #0]
 8000aba:	2b31      	cmp	r3, #49	; 0x31
 8000abc:	d904      	bls.n	8000ac8 <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff ff40 	bl	8000944 <modbusException>
		return 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e036      	b.n	8000b36 <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <readInputRegs+0xdc>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <readInputRegs+0xd8>)
 8000ad0:	785a      	ldrb	r2, [r3, #1]
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <readInputRegs+0xdc>)
 8000ad4:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <readInputRegs+0xdc>)
 8000ae0:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e01b      	b.n	8000b24 <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <readInputRegs+0xe0>)
 8000af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b299      	uxth	r1, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	b2c9      	uxtb	r1, r1
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <readInputRegs+0xdc>)
 8000b02:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <readInputRegs+0xe0>)
 8000b08:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2c9      	uxtb	r1, r1
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <readInputRegs+0xdc>)
 8000b16:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbdf      	blt.n	8000aec <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <readInputRegs+0xdc>)
 8000b30:	f7ff fedc 	bl	80008ec <sendData>
	return 1;   // success
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000140 	.word	0x24000140
 8000b44:	24000240 	.word	0x24000240
 8000b48:	08007c5c 	.word	0x08007c5c

08000b4c <readCoils>:

uint8_t readCoils (void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8000b52:	4b52      	ldr	r3, [pc, #328]	; (8000c9c <readCoils+0x150>)
 8000b54:	789b      	ldrb	r3, [r3, #2]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <readCoils+0x150>)
 8000b5c:	78db      	ldrb	r3, [r3, #3]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8000b66:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <readCoils+0x150>)
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <readCoils+0x150>)
 8000b70:	795b      	ldrb	r3, [r3, #5]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8000b7a:	893b      	ldrh	r3, [r7, #8]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <readCoils+0x3c>
 8000b80:	893b      	ldrh	r3, [r7, #8]
 8000b82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b86:	d904      	bls.n	8000b92 <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f7ff fedb 	bl	8000944 <modbusException>
		return 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e080      	b.n	8000c94 <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8000b92:	897a      	ldrh	r2, [r7, #10]
 8000b94:	893b      	ldrh	r3, [r7, #8]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	2bc7      	cmp	r3, #199	; 0xc7
 8000ba2:	d904      	bls.n	8000bae <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fecd 	bl	8000944 <modbusException>
		return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e072      	b.n	8000c94 <readCoils+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8000bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <readCoils+0x154>)
 8000bb6:	f007 f83d 	bl	8007c34 <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <readCoils+0x154>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <readCoils+0x150>)
 8000bc2:	785a      	ldrb	r2, [r3, #1]
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <readCoils+0x154>)
 8000bc6:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8000bc8:	893b      	ldrh	r3, [r7, #8]
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	893a      	ldrh	r2, [r7, #8]
 8000bd2:	f002 0207 	and.w	r2, r2, #7
 8000bd6:	b292      	uxth	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	bf14      	ite	ne
 8000bdc:	2201      	movne	r2, #1
 8000bde:	2200      	moveq	r2, #0
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	4413      	add	r3, r2
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <readCoils+0x154>)
 8000be8:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000bea:	2303      	movs	r3, #3
 8000bec:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000bee:	897b      	ldrh	r3, [r7, #10]
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000bf6:	897b      	ldrh	r3, [r7, #10]
 8000bf8:	f003 0307 	and.w	r3, r3, #7
 8000bfc:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e033      	b.n	8000c70 <readCoils+0x124>
	{
		TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8000c08:	4a25      	ldr	r2, [pc, #148]	; (8000ca0 <readCoils+0x154>)
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	4924      	ldr	r1, [pc, #144]	; (8000ca4 <readCoils+0x158>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	440b      	add	r3, r1
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	8afb      	ldrh	r3, [r7, #22]
 8000c1e:	fa41 f303 	asr.w	r3, r1, r3
 8000c22:	f003 0101 	and.w	r1, r3, #1
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <readCoils+0x154>)
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	4413      	add	r3, r2
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	3301      	adds	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	8afb      	ldrh	r3, [r7, #22]
 8000c46:	3301      	adds	r3, #1
 8000c48:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	dd04      	ble.n	8000c5a <readCoils+0x10e>
		{
			indxPosition = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
			indx++;
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000c5a:	8afb      	ldrh	r3, [r7, #22]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d904      	bls.n	8000c6a <readCoils+0x11e>
		{
			bitPosition=0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	3301      	adds	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	893b      	ldrh	r3, [r7, #8]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbc7      	blt.n	8000c08 <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <readCoils+0x13e>
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	3301      	adds	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000c8a:	69f9      	ldr	r1, [r7, #28]
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <readCoils+0x154>)
 8000c8e:	f7ff fe2d 	bl	80008ec <sendData>
	return 1;   // success
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	24000140 	.word	0x24000140
 8000ca0:	24000240 	.word	0x24000240
 8000ca4:	24000064 	.word	0x24000064

08000ca8 <readInputs>:

uint8_t readInputs (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000cae:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <readInputs+0x150>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <readInputs+0x150>)
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8000cc2:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <readInputs+0x150>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <readInputs+0x150>)
 8000ccc:	795b      	ldrb	r3, [r3, #5]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8000cd6:	893b      	ldrh	r3, [r7, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <readInputs+0x3c>
 8000cdc:	893b      	ldrh	r3, [r7, #8]
 8000cde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ce2:	d904      	bls.n	8000cee <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f7ff fe2d 	bl	8000944 <modbusException>
		return 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e080      	b.n	8000df0 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8000cee:	897a      	ldrh	r2, [r7, #10]
 8000cf0:	893b      	ldrh	r3, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2bc7      	cmp	r3, #199	; 0xc7
 8000cfe:	d904      	bls.n	8000d0a <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fe1f 	bl	8000944 <modbusException>
		return 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e072      	b.n	8000df0 <readInputs+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8000d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0e:	2100      	movs	r1, #0
 8000d10:	483a      	ldr	r0, [pc, #232]	; (8000dfc <readInputs+0x154>)
 8000d12:	f006 ff8f 	bl	8007c34 <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <readInputs+0x154>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <readInputs+0x150>)
 8000d1e:	785a      	ldrb	r2, [r3, #1]
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <readInputs+0x154>)
 8000d22:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8000d24:	893b      	ldrh	r3, [r7, #8]
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	893a      	ldrh	r2, [r7, #8]
 8000d2e:	f002 0207 	and.w	r2, r2, #7
 8000d32:	b292      	uxth	r2, r2
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2201      	movne	r2, #1
 8000d3a:	2200      	moveq	r2, #0
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <readInputs+0x154>)
 8000d44:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000d46:	2303      	movs	r3, #3
 8000d48:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000d4a:	897b      	ldrh	r3, [r7, #10]
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000d52:	897b      	ldrh	r3, [r7, #10]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e033      	b.n	8000dcc <readInputs+0x124>
	{
		TxData[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8000d64:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <readInputs+0x154>)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	4924      	ldr	r1, [pc, #144]	; (8000e00 <readInputs+0x158>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	440b      	add	r3, r1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	8afb      	ldrh	r3, [r7, #22]
 8000d7a:	fa41 f303 	asr.w	r3, r1, r3
 8000d7e:	f003 0101 	and.w	r1, r3, #1
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2d9      	uxtb	r1, r3
 8000d90:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <readInputs+0x154>)
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	4413      	add	r3, r2
 8000d96:	460a      	mov	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	8afb      	ldrh	r3, [r7, #22]
 8000da2:	3301      	adds	r3, #1
 8000da4:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	dd04      	ble.n	8000db6 <readInputs+0x10e>
		{
			indxPosition = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
			indx++;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	3301      	adds	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000db6:	8afb      	ldrh	r3, [r7, #22]
 8000db8:	2b07      	cmp	r3, #7
 8000dba:	d904      	bls.n	8000dc6 <readInputs+0x11e>
		{
			bitPosition=0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	893b      	ldrh	r3, [r7, #8]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbc7      	blt.n	8000d64 <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8000dd4:	893b      	ldrh	r3, [r7, #8]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <readInputs+0x13e>
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3301      	adds	r3, #1
 8000de4:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000de6:	69f9      	ldr	r1, [r7, #28]
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <readInputs+0x154>)
 8000dea:	f7ff fd7f 	bl	80008ec <sendData>
	return 1;   // success
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	24000140 	.word	0x24000140
 8000dfc:	24000240 	.word	0x24000240
 8000e00:	08007cc0 	.word	0x08007cc0

08000e04 <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <writeHoldingRegs+0xe8>)
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <writeHoldingRegs+0xe8>)
 8000e14:	78db      	ldrb	r3, [r3, #3]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <writeHoldingRegs+0xe8>)
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <writeHoldingRegs+0xe8>)
 8000e28:	795b      	ldrb	r3, [r3, #5]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <writeHoldingRegs+0x3a>
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	2b7b      	cmp	r3, #123	; 0x7b
 8000e3c:	d904      	bls.n	8000e48 <writeHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f7ff fd80 	bl	8000944 <modbusException>
		return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e04c      	b.n	8000ee2 <writeHoldingRegs+0xde>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000e48:	89fa      	ldrh	r2, [r7, #14]
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	3b01      	subs	r3, #1
 8000e52:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000e54:	883b      	ldrh	r3, [r7, #0]
 8000e56:	2b31      	cmp	r3, #49	; 0x31
 8000e58:	d904      	bls.n	8000e64 <writeHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff fd72 	bl	8000944 <modbusException>
		return 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e03e      	b.n	8000ee2 <writeHoldingRegs+0xde>

	/* start saving 16 bit data
	 * Data starts from RxData[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData
 8000e64:	2307      	movs	r3, #7
 8000e66:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	e019      	b.n	8000ea2 <writeHoldingRegs+0x9e>
	{
		Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	60ba      	str	r2, [r7, #8]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <writeHoldingRegs+0xe8>)
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c59      	adds	r1, r3, #1
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	491a      	ldr	r1, [pc, #104]	; (8000eec <writeHoldingRegs+0xe8>)
 8000e84:	5ccb      	ldrb	r3, [r1, r3]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b219      	sxth	r1, r3
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	81fa      	strh	r2, [r7, #14]
 8000e92:	461a      	mov	r2, r3
 8000e94:	b289      	uxth	r1, r1
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <writeHoldingRegs+0xec>)
 8000e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dbe1      	blt.n	8000e6e <writeHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <writeHoldingRegs+0xe8>)
 8000eb2:	785a      	ldrb	r2, [r3, #1]
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000eb6:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <writeHoldingRegs+0xe8>)
 8000eba:	789a      	ldrb	r2, [r3, #2]
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000ebe:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <writeHoldingRegs+0xe8>)
 8000ec2:	78da      	ldrb	r2, [r3, #3]
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000ec6:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of Regs HIGH Byte
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <writeHoldingRegs+0xe8>)
 8000eca:	791a      	ldrb	r2, [r3, #4]
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000ece:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of Regs LOW Byte
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <writeHoldingRegs+0xe8>)
 8000ed2:	795a      	ldrb	r2, [r3, #5]
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000ed6:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000ed8:	2106      	movs	r1, #6
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <writeHoldingRegs+0xf0>)
 8000edc:	f7ff fd06 	bl	80008ec <sendData>
	return 1;   // success
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24000140 	.word	0x24000140
 8000ef0:	24000000 	.word	0x24000000
 8000ef4:	24000240 	.word	0x24000240

08000ef8 <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <writeSingleReg+0x88>)
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <writeSingleReg+0x88>)
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	2b31      	cmp	r3, #49	; 0x31
 8000f16:	d904      	bls.n	8000f22 <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff fd13 	bl	8000944 <modbusException>
		return 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e029      	b.n	8000f76 <writeSingleReg+0x7e>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <writeSingleReg+0x88>)
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <writeSingleReg+0x88>)
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	b291      	uxth	r1, r2
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <writeSingleReg+0x8c>)
 8000f3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <writeSingleReg+0x90>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <writeSingleReg+0x88>)
 8000f46:	785a      	ldrb	r2, [r3, #1]
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <writeSingleReg+0x90>)
 8000f4a:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <writeSingleReg+0x88>)
 8000f4e:	789a      	ldrb	r2, [r3, #2]
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <writeSingleReg+0x90>)
 8000f52:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <writeSingleReg+0x88>)
 8000f56:	78da      	ldrb	r2, [r3, #3]
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <writeSingleReg+0x90>)
 8000f5a:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <writeSingleReg+0x88>)
 8000f5e:	791a      	ldrb	r2, [r3, #4]
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <writeSingleReg+0x90>)
 8000f62:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Reg Data LOW  Byte
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <writeSingleReg+0x88>)
 8000f66:	795a      	ldrb	r2, [r3, #5]
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <writeSingleReg+0x90>)
 8000f6a:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000f6c:	2106      	movs	r1, #6
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <writeSingleReg+0x90>)
 8000f70:	f7ff fcbc 	bl	80008ec <sendData>
	return 1;   // success
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000140 	.word	0x24000140
 8000f84:	24000000 	.word	0x24000000
 8000f88:	24000240 	.word	0x24000240

08000f8c <writeSingleCoil>:

uint8_t writeSingleCoil (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <writeSingleCoil+0xe8>)
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <writeSingleCoil+0xe8>)
 8000f9c:	78db      	ldrb	r3, [r3, #3]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	81fb      	strh	r3, [r7, #14]

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	2bc7      	cmp	r3, #199	; 0xc7
 8000faa:	d904      	bls.n	8000fb6 <writeSingleCoil+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000fac:	2002      	movs	r0, #2
 8000fae:	f7ff fcc9 	bl	8000944 <modbusException>
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e05a      	b.n	800106c <writeSingleCoil+0xe0>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	60bb      	str	r3, [r7, #8]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	80fb      	strh	r3, [r7, #6]
	 * A value of FF 00 hex requests the coil to be ON.
	 * A value of 00 00 requests it to be OFF.
	 * All other values are illegal and will not affect the coil.
	 */

	if ((RxData[4] == 0xFF) && (RxData[5] == 0x00))
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <writeSingleCoil+0xe8>)
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d116      	bne.n	8000ffc <writeSingleCoil+0x70>
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <writeSingleCoil+0xe8>)
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d112      	bne.n	8000ffc <writeSingleCoil+0x70>
	{
		Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <writeSingleCoil+0xec>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b25a      	sxtb	r2, r3
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	b2d9      	uxtb	r1, r3
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <writeSingleCoil+0xec>)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e01b      	b.n	8001034 <writeSingleCoil+0xa8>
	}

	else if ((RxData[4] == 0x00) && (RxData[5] == 0x00))
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <writeSingleCoil+0xe8>)
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d117      	bne.n	8001034 <writeSingleCoil+0xa8>
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <writeSingleCoil+0xe8>)
 8001006:	795b      	ldrb	r3, [r3, #5]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d113      	bne.n	8001034 <writeSingleCoil+0xa8>
	{
		Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 800100c:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <writeSingleCoil+0xec>)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b25a      	sxtb	r2, r3
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	b25b      	sxtb	r3, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	b25b      	sxtb	r3, r3
 8001024:	4013      	ands	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	b2d9      	uxtb	r1, r3
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <writeSingleCoil+0xec>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	460a      	mov	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <writeSingleCoil+0xf0>)
 8001036:	2207      	movs	r2, #7
 8001038:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <writeSingleCoil+0xe8>)
 800103c:	785a      	ldrb	r2, [r3, #1]
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <writeSingleCoil+0xf0>)
 8001040:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <writeSingleCoil+0xe8>)
 8001044:	789a      	ldrb	r2, [r3, #2]
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <writeSingleCoil+0xf0>)
 8001048:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <writeSingleCoil+0xe8>)
 800104c:	78da      	ldrb	r2, [r3, #3]
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <writeSingleCoil+0xf0>)
 8001050:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Coil Data HIGH Byte
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <writeSingleCoil+0xe8>)
 8001054:	791a      	ldrb	r2, [r3, #4]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <writeSingleCoil+0xf0>)
 8001058:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Coil Data LOW  Byte
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <writeSingleCoil+0xe8>)
 800105c:	795a      	ldrb	r2, [r3, #5]
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <writeSingleCoil+0xf0>)
 8001060:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8001062:	2106      	movs	r1, #6
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <writeSingleCoil+0xf0>)
 8001066:	f7ff fc41 	bl	80008ec <sendData>
	return 1;   // success
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	24000140 	.word	0x24000140
 8001078:	24000064 	.word	0x24000064
 800107c:	24000240 	.word	0x24000240

08001080 <writeMultiCoils>:

uint8_t writeMultiCoils (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8001086:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <writeMultiCoils+0x160>)
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <writeMultiCoils+0x160>)
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 800109a:	4b51      	ldr	r3, [pc, #324]	; (80011e0 <writeMultiCoils+0x160>)
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <writeMultiCoils+0x160>)
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>1968))  // maximum no. of coils as per the PDF
 80010ae:	893b      	ldrh	r3, [r7, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <writeMultiCoils+0x3c>
 80010b4:	893b      	ldrh	r3, [r7, #8]
 80010b6:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80010ba:	d904      	bls.n	80010c6 <writeMultiCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80010bc:	2003      	movs	r0, #3
 80010be:	f7ff fc41 	bl	8000944 <modbusException>
		return 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e088      	b.n	80011d8 <writeMultiCoils+0x158>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80010c6:	897a      	ldrh	r2, [r7, #10]
 80010c8:	893b      	ldrh	r3, [r7, #8]
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2bc7      	cmp	r3, #199	; 0xc7
 80010d6:	d904      	bls.n	80010e2 <writeMultiCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff fc33 	bl	8000944 <modbusException>
		return 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	e07a      	b.n	80011d8 <writeMultiCoils+0x158>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 80010e2:	897b      	ldrh	r3, [r7, #10]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	61fb      	str	r3, [r7, #28]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	837b      	strh	r3, [r7, #26]
	int indxPosition = 0;  // The shift position in the current indx of the RxData buffer
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]

	int indx = 7;  // we need to keep track of index in RxData
 80010f6:	2307      	movs	r3, #7
 80010f8:	613b      	str	r3, [r7, #16]
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy from the next byte of the RxData
	 * This keeps going until the number of coils required have been modified
	 */

	// Modify the bits as per the Byte received
	for (int i=0; i<numCoils; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e04b      	b.n	8001198 <writeMultiCoils+0x118>
	{
		if (((RxData[indx]>>indxPosition)&0x01) == 1)
 8001100:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <writeMultiCoils+0x160>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa42 f303 	asr.w	r3, r2, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d012      	beq.n	800113e <writeMultiCoils+0xbe>
		{
			Coils_Database[startByte] |= 1<<bitPosition;  // replace that bit with 1
 8001118:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <writeMultiCoils+0x164>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25a      	sxtb	r2, r3
 8001122:	8b7b      	ldrh	r3, [r7, #26]
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	b25b      	sxtb	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b25b      	sxtb	r3, r3
 8001130:	b2d9      	uxtb	r1, r3
 8001132:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <writeMultiCoils+0x164>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	4413      	add	r3, r2
 8001138:	460a      	mov	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e013      	b.n	8001166 <writeMultiCoils+0xe6>
		}
		else
		{
			Coils_Database[startByte] &= ~(1<<bitPosition);  // replace that bit with 0
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <writeMultiCoils+0x164>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25a      	sxtb	r2, r3
 8001148:	8b7b      	ldrh	r3, [r7, #26]
 800114a:	2101      	movs	r1, #1
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	b25b      	sxtb	r3, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4013      	ands	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2d9      	uxtb	r1, r3
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <writeMultiCoils+0x164>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
		}

		bitPosition++; indxPosition++;
 8001166:	8b7b      	ldrh	r3, [r7, #26]
 8001168:	3301      	adds	r3, #1
 800116a:	837b      	strh	r3, [r7, #26]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]

		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b07      	cmp	r3, #7
 8001176:	dd04      	ble.n	8001182 <writeMultiCoils+0x102>
		{
			indxPosition = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
			indx++;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3301      	adds	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8001182:	8b7b      	ldrh	r3, [r7, #26]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d904      	bls.n	8001192 <writeMultiCoils+0x112>
		{
			bitPosition=0;
 8001188:	2300      	movs	r3, #0
 800118a:	837b      	strh	r3, [r7, #26]
			startByte++;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3301      	adds	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<numCoils; i++)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	893b      	ldrh	r3, [r7, #8]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbaf      	blt.n	8001100 <writeMultiCoils+0x80>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <writeMultiCoils+0x168>)
 80011a2:	2207      	movs	r2, #7
 80011a4:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <writeMultiCoils+0x160>)
 80011a8:	785a      	ldrb	r2, [r3, #1]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <writeMultiCoils+0x168>)
 80011ac:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <writeMultiCoils+0x160>)
 80011b0:	789a      	ldrb	r2, [r3, #2]
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <writeMultiCoils+0x168>)
 80011b4:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <writeMultiCoils+0x160>)
 80011b8:	78da      	ldrb	r2, [r3, #3]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <writeMultiCoils+0x168>)
 80011bc:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of coils HIGH Byte
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <writeMultiCoils+0x160>)
 80011c0:	791a      	ldrb	r2, [r3, #4]
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <writeMultiCoils+0x168>)
 80011c4:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of coils LOW  Byte
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <writeMultiCoils+0x160>)
 80011c8:	795a      	ldrb	r2, [r3, #5]
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <writeMultiCoils+0x168>)
 80011cc:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80011ce:	2106      	movs	r1, #6
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <writeMultiCoils+0x168>)
 80011d2:	f7ff fb8b 	bl	80008ec <sendData>
	return 1;   // success
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	24000140 	.word	0x24000140
 80011e4:	24000064 	.word	0x24000064
 80011e8:	24000240 	.word	0x24000240

080011ec <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80011f8:	23ff      	movs	r3, #255	; 0xff
 80011fa:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80011fc:	23ff      	movs	r3, #255	; 0xff
 80011fe:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001200:	e013      	b.n	800122a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	4053      	eors	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <crc16+0x64>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	4053      	eors	r3, r2
 800121e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <crc16+0x68>)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	807a      	strh	r2, [r7, #2]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1e6      	bne.n	8001202 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	b29b      	uxth	r3, r3
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	08007cdc 	.word	0x08007cdc
 8001254:	08007ddc 	.word	0x08007ddc

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_MspInit+0x30>)
 8001260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x30>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x30>)
 8001270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	58024400 	.word	0x58024400

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ba      	sub	sp, #232	; 0xe8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	22c0      	movs	r2, #192	; 0xc0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fcc1 	bl	8007c34 <memset>
  if(huart->Instance==UART5)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a2b      	ldr	r2, [pc, #172]	; (8001364 <HAL_UART_MspInit+0xd8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d14e      	bne.n	800135a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80012bc:	f04f 0202 	mov.w	r2, #2
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fa2e 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012de:	f7ff faff 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_UART_MspInit+0xdc>)
 80012e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_UART_MspInit+0xdc>)
 80012ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_UART_MspInit+0xdc>)
 80012f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_UART_MspInit+0xdc>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_UART_MspInit+0xdc>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0xdc>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800131e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001338:	230e      	movs	r3, #14
 800133a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001342:	4619      	mov	r1, r3
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <HAL_UART_MspInit+0xe0>)
 8001346:	f001 f80b 	bl	8002360 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2035      	movs	r0, #53	; 0x35
 8001350:	f000 fa6d 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001354:	2035      	movs	r0, #53	; 0x35
 8001356:	f000 fa84 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	37e8      	adds	r7, #232	; 0xe8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40005000 	.word	0x40005000
 8001368:	58024400 	.word	0x58024400
 800136c:	58020400 	.word	0x58020400

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f930 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <UART5_IRQHandler+0x10>)
 80013ca:	f004 f8bd 	bl	8005548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	240000ac 	.word	0x240000ac

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <SystemInit+0xe4>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a36      	ldr	r2, [pc, #216]	; (80014bc <SystemInit+0xe4>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SystemInit+0xe8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d807      	bhi.n	8001408 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <SystemInit+0xe8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 030f 	bic.w	r3, r3, #15
 8001400:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <SystemInit+0xe8>)
 8001402:	f043 0307 	orr.w	r3, r3, #7
 8001406:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <SystemInit+0xec>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <SystemInit+0xec>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <SystemInit+0xec>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <SystemInit+0xec>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4929      	ldr	r1, [pc, #164]	; (80014c4 <SystemInit+0xec>)
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <SystemInit+0xf0>)
 8001422:	4013      	ands	r3, r2
 8001424:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <SystemInit+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <SystemInit+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 030f 	bic.w	r3, r3, #15
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <SystemInit+0xe8>)
 800143c:	f043 0307 	orr.w	r3, r3, #7
 8001440:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <SystemInit+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemInit+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <SystemInit+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <SystemInit+0xec>)
 8001456:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <SystemInit+0xf4>)
 8001458:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <SystemInit+0xec>)
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <SystemInit+0xf8>)
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <SystemInit+0xec>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <SystemInit+0xfc>)
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <SystemInit+0xec>)
 800146e:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <SystemInit+0xfc>)
 8001470:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <SystemInit+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <SystemInit+0xec>)
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <SystemInit+0xfc>)
 800147c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <SystemInit+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <SystemInit+0xec>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <SystemInit+0xec>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <SystemInit+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <SystemInit+0x100>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <SystemInit+0x104>)
 800149c:	4013      	ands	r3, r2
 800149e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014a2:	d202      	bcs.n	80014aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <SystemInit+0x108>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <SystemInit+0x10c>)
 80014ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00
 80014c0:	52002000 	.word	0x52002000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80014cc:	02020200 	.word	0x02020200
 80014d0:	01ff0000 	.word	0x01ff0000
 80014d4:	01010280 	.word	0x01010280
 80014d8:	5c001000 	.word	0x5c001000
 80014dc:	ffff0000 	.word	0xffff0000
 80014e0:	51008108 	.word	0x51008108
 80014e4:	52004000 	.word	0x52004000

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014ec:	f7ff ff74 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f006 fb69 	bl	8007bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f8bd 	bl	8000698 <main>
  bx  lr
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001524:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001528:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 800152c:	08007f24 	.word	0x08007f24
  ldr r2, =_sbss
 8001530:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8001534:	24000344 	.word	0x24000344

08001538 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC3_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 f968 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001548:	f001 ff1e 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_Init+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <HAL_Init+0x6c>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_Init+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_Init+0x6c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_Init+0x70>)
 800157e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x74>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f814 	bl	80015b4 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e002      	b.n	800159c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fe5f 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58024400 	.word	0x58024400
 80015a8:	08007edc 	.word	0x08007edc
 80015ac:	24000084 	.word	0x24000084
 80015b0:	24000080 	.word	0x24000080

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e021      	b.n	800160c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_InitTick+0x64>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_InitTick+0x60>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f94d 	bl	800187e <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f917 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x68>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2400008c 	.word	0x2400008c
 8001618:	24000080 	.word	0x24000080
 800161c:	24000088 	.word	0x24000088

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2400008c 	.word	0x2400008c
 8001644:	24000340 	.word	0x24000340

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	24000340 	.word	0x24000340

08001660 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetREVID+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0c1b      	lsrs	r3, r3, #16
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	5c001000 	.word	0x5c001000

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	05fa0000 	.word	0x05fa0000

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff40 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff33 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa4 	bl	80017d4 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff fed2 	bl	8001648 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e2dc      	b.n	8001e6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e2cd      	b.n	8001e6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a76      	ldr	r2, [pc, #472]	; (8001aac <HAL_DMA_Abort+0x214>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04a      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a74      	ldr	r2, [pc, #464]	; (8001ab0 <HAL_DMA_Abort+0x218>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d045      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a73      	ldr	r2, [pc, #460]	; (8001ab4 <HAL_DMA_Abort+0x21c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d040      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a71      	ldr	r2, [pc, #452]	; (8001ab8 <HAL_DMA_Abort+0x220>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d03b      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a70      	ldr	r2, [pc, #448]	; (8001abc <HAL_DMA_Abort+0x224>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d036      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_DMA_Abort+0x228>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d031      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6d      	ldr	r2, [pc, #436]	; (8001ac4 <HAL_DMA_Abort+0x22c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d02c      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6b      	ldr	r2, [pc, #428]	; (8001ac8 <HAL_DMA_Abort+0x230>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d027      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <HAL_DMA_Abort+0x234>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a68      	ldr	r2, [pc, #416]	; (8001ad0 <HAL_DMA_Abort+0x238>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01d      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a67      	ldr	r2, [pc, #412]	; (8001ad4 <HAL_DMA_Abort+0x23c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d018      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a65      	ldr	r2, [pc, #404]	; (8001ad8 <HAL_DMA_Abort+0x240>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a64      	ldr	r2, [pc, #400]	; (8001adc <HAL_DMA_Abort+0x244>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a62      	ldr	r2, [pc, #392]	; (8001ae0 <HAL_DMA_Abort+0x248>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a61      	ldr	r2, [pc, #388]	; (8001ae4 <HAL_DMA_Abort+0x24c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_DMA_Abort+0xd6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a5f      	ldr	r2, [pc, #380]	; (8001ae8 <HAL_DMA_Abort+0x250>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Abort+0xda>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_DMA_Abort+0xdc>
 8001972:	2300      	movs	r3, #0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 021e 	bic.w	r2, r2, #30
 8001986:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001996:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e00a      	b.n	80019b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 020e 	bic.w	r2, r2, #14
 80019ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <HAL_DMA_Abort+0x214>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d072      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3a      	ldr	r2, [pc, #232]	; (8001ab0 <HAL_DMA_Abort+0x218>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d06d      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a39      	ldr	r2, [pc, #228]	; (8001ab4 <HAL_DMA_Abort+0x21c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d068      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a37      	ldr	r2, [pc, #220]	; (8001ab8 <HAL_DMA_Abort+0x220>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d063      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a36      	ldr	r2, [pc, #216]	; (8001abc <HAL_DMA_Abort+0x224>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d05e      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a34      	ldr	r2, [pc, #208]	; (8001ac0 <HAL_DMA_Abort+0x228>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d059      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a33      	ldr	r2, [pc, #204]	; (8001ac4 <HAL_DMA_Abort+0x22c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d054      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <HAL_DMA_Abort+0x230>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d04f      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_DMA_Abort+0x234>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d04a      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_DMA_Abort+0x238>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d045      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <HAL_DMA_Abort+0x23c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d040      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <HAL_DMA_Abort+0x240>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d03b      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <HAL_DMA_Abort+0x244>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d036      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <HAL_DMA_Abort+0x248>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d031      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_DMA_Abort+0x24c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d02c      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <HAL_DMA_Abort+0x250>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d027      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a24      	ldr	r2, [pc, #144]	; (8001aec <HAL_DMA_Abort+0x254>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_DMA_Abort+0x258>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <HAL_DMA_Abort+0x25c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_DMA_Abort+0x260>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_DMA_Abort+0x264>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_DMA_Abort+0x268>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_DMA_Abort+0x26c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_DMA_Abort+0x20e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_DMA_Abort+0x270>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d132      	bne.n	8001b0c <HAL_DMA_Abort+0x274>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e031      	b.n	8001b0e <HAL_DMA_Abort+0x276>
 8001aaa:	bf00      	nop
 8001aac:	40020010 	.word	0x40020010
 8001ab0:	40020028 	.word	0x40020028
 8001ab4:	40020040 	.word	0x40020040
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	40020070 	.word	0x40020070
 8001ac0:	40020088 	.word	0x40020088
 8001ac4:	400200a0 	.word	0x400200a0
 8001ac8:	400200b8 	.word	0x400200b8
 8001acc:	40020410 	.word	0x40020410
 8001ad0:	40020428 	.word	0x40020428
 8001ad4:	40020440 	.word	0x40020440
 8001ad8:	40020458 	.word	0x40020458
 8001adc:	40020470 	.word	0x40020470
 8001ae0:	40020488 	.word	0x40020488
 8001ae4:	400204a0 	.word	0x400204a0
 8001ae8:	400204b8 	.word	0x400204b8
 8001aec:	58025408 	.word	0x58025408
 8001af0:	5802541c 	.word	0x5802541c
 8001af4:	58025430 	.word	0x58025430
 8001af8:	58025444 	.word	0x58025444
 8001afc:	58025458 	.word	0x58025458
 8001b00:	5802546c 	.word	0x5802546c
 8001b04:	58025480 	.word	0x58025480
 8001b08:	58025494 	.word	0x58025494
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6d      	ldr	r2, [pc, #436]	; (8001cdc <HAL_DMA_Abort+0x444>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04a      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_DMA_Abort+0x448>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d045      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_DMA_Abort+0x44c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d040      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a68      	ldr	r2, [pc, #416]	; (8001ce8 <HAL_DMA_Abort+0x450>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d03b      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_DMA_Abort+0x454>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d036      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_DMA_Abort+0x458>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d031      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a64      	ldr	r2, [pc, #400]	; (8001cf4 <HAL_DMA_Abort+0x45c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d02c      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a62      	ldr	r2, [pc, #392]	; (8001cf8 <HAL_DMA_Abort+0x460>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d027      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a61      	ldr	r2, [pc, #388]	; (8001cfc <HAL_DMA_Abort+0x464>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d022      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5f      	ldr	r2, [pc, #380]	; (8001d00 <HAL_DMA_Abort+0x468>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01d      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <HAL_DMA_Abort+0x46c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d018      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5c      	ldr	r2, [pc, #368]	; (8001d08 <HAL_DMA_Abort+0x470>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	; (8001d0c <HAL_DMA_Abort+0x474>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00e      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a59      	ldr	r2, [pc, #356]	; (8001d10 <HAL_DMA_Abort+0x478>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d009      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_DMA_Abort+0x47c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_DMA_Abort+0x32a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a56      	ldr	r2, [pc, #344]	; (8001d18 <HAL_DMA_Abort+0x480>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <HAL_DMA_Abort+0x33c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e007      	b.n	8001be4 <HAL_DMA_Abort+0x34c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001be4:	e013      	b.n	8001c0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fd2f 	bl	8001648 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d90c      	bls.n	8001c0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e12d      	b.n	8001e6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e5      	bne.n	8001be6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_DMA_Abort+0x444>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d04a      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_DMA_Abort+0x448>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d045      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2c      	ldr	r2, [pc, #176]	; (8001ce4 <HAL_DMA_Abort+0x44c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d040      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HAL_DMA_Abort+0x450>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d03b      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a29      	ldr	r2, [pc, #164]	; (8001cec <HAL_DMA_Abort+0x454>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_DMA_Abort+0x458>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_DMA_Abort+0x45c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d02c      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_DMA_Abort+0x460>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d027      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_DMA_Abort+0x464>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_DMA_Abort+0x468>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_DMA_Abort+0x46c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_DMA_Abort+0x470>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_DMA_Abort+0x474>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_DMA_Abort+0x478>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <HAL_DMA_Abort+0x47c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Abort+0x422>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_DMA_Abort+0x480>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_DMA_Abort+0x426>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_Abort+0x428>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02b      	beq.n	8001d1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	223f      	movs	r2, #63	; 0x3f
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	e02a      	b.n	8001d32 <HAL_DMA_Abort+0x49a>
 8001cdc:	40020010 	.word	0x40020010
 8001ce0:	40020028 	.word	0x40020028
 8001ce4:	40020040 	.word	0x40020040
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40020070 	.word	0x40020070
 8001cf0:	40020088 	.word	0x40020088
 8001cf4:	400200a0 	.word	0x400200a0
 8001cf8:	400200b8 	.word	0x400200b8
 8001cfc:	40020410 	.word	0x40020410
 8001d00:	40020428 	.word	0x40020428
 8001d04:	40020440 	.word	0x40020440
 8001d08:	40020458 	.word	0x40020458
 8001d0c:	40020470 	.word	0x40020470
 8001d10:	40020488 	.word	0x40020488
 8001d14:	400204a0 	.word	0x400204a0
 8001d18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_DMA_Abort+0x5dc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d072      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a4d      	ldr	r2, [pc, #308]	; (8001e78 <HAL_DMA_Abort+0x5e0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d06d      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_DMA_Abort+0x5e4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d068      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	; (8001e80 <HAL_DMA_Abort+0x5e8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d063      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <HAL_DMA_Abort+0x5ec>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d05e      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_DMA_Abort+0x5f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d059      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a46      	ldr	r2, [pc, #280]	; (8001e8c <HAL_DMA_Abort+0x5f4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d054      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a44      	ldr	r2, [pc, #272]	; (8001e90 <HAL_DMA_Abort+0x5f8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d04f      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a43      	ldr	r2, [pc, #268]	; (8001e94 <HAL_DMA_Abort+0x5fc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04a      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a41      	ldr	r2, [pc, #260]	; (8001e98 <HAL_DMA_Abort+0x600>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d045      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <HAL_DMA_Abort+0x604>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d040      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a3e      	ldr	r2, [pc, #248]	; (8001ea0 <HAL_DMA_Abort+0x608>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d03b      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3d      	ldr	r2, [pc, #244]	; (8001ea4 <HAL_DMA_Abort+0x60c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d036      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <HAL_DMA_Abort+0x610>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	; (8001eac <HAL_DMA_Abort+0x614>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d02c      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <HAL_DMA_Abort+0x618>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <HAL_DMA_Abort+0x61c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a35      	ldr	r2, [pc, #212]	; (8001eb8 <HAL_DMA_Abort+0x620>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_DMA_Abort+0x624>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <HAL_DMA_Abort+0x628>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a31      	ldr	r2, [pc, #196]	; (8001ec4 <HAL_DMA_Abort+0x62c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <HAL_DMA_Abort+0x630>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <HAL_DMA_Abort+0x634>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_DMA_Abort+0x58a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <HAL_DMA_Abort+0x638>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_DMA_Abort+0x58e>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_DMA_Abort+0x590>
 8001e26:	2300      	movs	r3, #0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d015      	beq.n	8001e58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020010 	.word	0x40020010
 8001e78:	40020028 	.word	0x40020028
 8001e7c:	40020040 	.word	0x40020040
 8001e80:	40020058 	.word	0x40020058
 8001e84:	40020070 	.word	0x40020070
 8001e88:	40020088 	.word	0x40020088
 8001e8c:	400200a0 	.word	0x400200a0
 8001e90:	400200b8 	.word	0x400200b8
 8001e94:	40020410 	.word	0x40020410
 8001e98:	40020428 	.word	0x40020428
 8001e9c:	40020440 	.word	0x40020440
 8001ea0:	40020458 	.word	0x40020458
 8001ea4:	40020470 	.word	0x40020470
 8001ea8:	40020488 	.word	0x40020488
 8001eac:	400204a0 	.word	0x400204a0
 8001eb0:	400204b8 	.word	0x400204b8
 8001eb4:	58025408 	.word	0x58025408
 8001eb8:	5802541c 	.word	0x5802541c
 8001ebc:	58025430 	.word	0x58025430
 8001ec0:	58025444 	.word	0x58025444
 8001ec4:	58025458 	.word	0x58025458
 8001ec8:	5802546c 	.word	0x5802546c
 8001ecc:	58025480 	.word	0x58025480
 8001ed0:	58025494 	.word	0x58025494

08001ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e237      	b.n	8002356 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d004      	beq.n	8001efc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e22c      	b.n	8002356 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_DMA_Abort_IT+0x1a0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04a      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <HAL_DMA_Abort_IT+0x1a4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d045      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_DMA_Abort_IT+0x1a8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_DMA_Abort_IT+0x1ac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d03b      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_DMA_Abort_IT+0x1b0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d036      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a55      	ldr	r2, [pc, #340]	; (8002088 <HAL_DMA_Abort_IT+0x1b4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_DMA_Abort_IT+0x1b8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02c      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_DMA_Abort_IT+0x1bc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d027      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_DMA_Abort_IT+0x1c0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d022      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <HAL_DMA_Abort_IT+0x1c4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d01d      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_DMA_Abort_IT+0x1c8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d018      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_DMA_Abort_IT+0x1cc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_DMA_Abort_IT+0x1d0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_DMA_Abort_IT+0x1d4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_DMA_Abort_IT+0x1d8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xc8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Abort_IT+0xcc>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_Abort_IT+0xce>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8086 	beq.w	80020b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2204      	movs	r2, #4
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <HAL_DMA_Abort_IT+0x1a0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d04a      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <HAL_DMA_Abort_IT+0x1a4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d045      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2c      	ldr	r2, [pc, #176]	; (800207c <HAL_DMA_Abort_IT+0x1a8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d040      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <HAL_DMA_Abort_IT+0x1ac>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d03b      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a29      	ldr	r2, [pc, #164]	; (8002084 <HAL_DMA_Abort_IT+0x1b0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d036      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_DMA_Abort_IT+0x1b4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d031      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_DMA_Abort_IT+0x1b8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02c      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_DMA_Abort_IT+0x1bc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d027      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_DMA_Abort_IT+0x1c0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d022      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_DMA_Abort_IT+0x1c4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d01d      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_DMA_Abort_IT+0x1c8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d018      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_DMA_Abort_IT+0x1d0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00e      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <HAL_DMA_Abort_IT+0x1d8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_DMA_Abort_IT+0x1dc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <HAL_DMA_Abort_IT+0x18e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e178      	b.n	8002354 <HAL_DMA_Abort_IT+0x480>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e16f      	b.n	8002354 <HAL_DMA_Abort_IT+0x480>
 8002074:	40020010 	.word	0x40020010
 8002078:	40020028 	.word	0x40020028
 800207c:	40020040 	.word	0x40020040
 8002080:	40020058 	.word	0x40020058
 8002084:	40020070 	.word	0x40020070
 8002088:	40020088 	.word	0x40020088
 800208c:	400200a0 	.word	0x400200a0
 8002090:	400200b8 	.word	0x400200b8
 8002094:	40020410 	.word	0x40020410
 8002098:	40020428 	.word	0x40020428
 800209c:	40020440 	.word	0x40020440
 80020a0:	40020458 	.word	0x40020458
 80020a4:	40020470 	.word	0x40020470
 80020a8:	40020488 	.word	0x40020488
 80020ac:	400204a0 	.word	0x400204a0
 80020b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 020e 	bic.w	r2, r2, #14
 80020c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6c      	ldr	r2, [pc, #432]	; (800227c <HAL_DMA_Abort_IT+0x3a8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <HAL_DMA_Abort_IT+0x3ac>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d045      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a69      	ldr	r2, [pc, #420]	; (8002284 <HAL_DMA_Abort_IT+0x3b0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d040      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a68      	ldr	r2, [pc, #416]	; (8002288 <HAL_DMA_Abort_IT+0x3b4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d03b      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a66      	ldr	r2, [pc, #408]	; (800228c <HAL_DMA_Abort_IT+0x3b8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_DMA_Abort_IT+0x3bc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d031      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a63      	ldr	r2, [pc, #396]	; (8002294 <HAL_DMA_Abort_IT+0x3c0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a62      	ldr	r2, [pc, #392]	; (8002298 <HAL_DMA_Abort_IT+0x3c4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d027      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a60      	ldr	r2, [pc, #384]	; (800229c <HAL_DMA_Abort_IT+0x3c8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5f      	ldr	r2, [pc, #380]	; (80022a0 <HAL_DMA_Abort_IT+0x3cc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_DMA_Abort_IT+0x3d0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <HAL_DMA_Abort_IT+0x3d4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_DMA_Abort_IT+0x3d8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a59      	ldr	r2, [pc, #356]	; (80022b0 <HAL_DMA_Abort_IT+0x3dc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_Abort_IT+0x290>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a56      	ldr	r2, [pc, #344]	; (80022b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <HAL_DMA_Abort_IT+0x2a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e007      	b.n	8002186 <HAL_DMA_Abort_IT+0x2b2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a3c      	ldr	r2, [pc, #240]	; (800227c <HAL_DMA_Abort_IT+0x3a8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d072      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <HAL_DMA_Abort_IT+0x3ac>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d06d      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a39      	ldr	r2, [pc, #228]	; (8002284 <HAL_DMA_Abort_IT+0x3b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d068      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a37      	ldr	r2, [pc, #220]	; (8002288 <HAL_DMA_Abort_IT+0x3b4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d063      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a36      	ldr	r2, [pc, #216]	; (800228c <HAL_DMA_Abort_IT+0x3b8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d05e      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a34      	ldr	r2, [pc, #208]	; (8002290 <HAL_DMA_Abort_IT+0x3bc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d059      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a33      	ldr	r2, [pc, #204]	; (8002294 <HAL_DMA_Abort_IT+0x3c0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d054      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_DMA_Abort_IT+0x3c4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04f      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_DMA_Abort_IT+0x3c8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <HAL_DMA_Abort_IT+0x3cc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d045      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2d      	ldr	r2, [pc, #180]	; (80022a4 <HAL_DMA_Abort_IT+0x3d0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d040      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <HAL_DMA_Abort_IT+0x3d4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d03b      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <HAL_DMA_Abort_IT+0x3d8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d036      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_DMA_Abort_IT+0x3dc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d027      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <HAL_DMA_Abort_IT+0x3e8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_DMA_Abort_IT+0x3ec>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_DMA_Abort_IT+0x3f0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_DMA_Abort_IT+0x3f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_DMA_Abort_IT+0x3f8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_DMA_Abort_IT+0x3fc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <HAL_DMA_Abort_IT+0x400>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Abort_IT+0x3a2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_DMA_Abort_IT+0x404>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d132      	bne.n	80022dc <HAL_DMA_Abort_IT+0x408>
 8002276:	2301      	movs	r3, #1
 8002278:	e031      	b.n	80022de <HAL_DMA_Abort_IT+0x40a>
 800227a:	bf00      	nop
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
 80022bc:	58025408 	.word	0x58025408
 80022c0:	5802541c 	.word	0x5802541c
 80022c4:	58025430 	.word	0x58025430
 80022c8:	58025444 	.word	0x58025444
 80022cc:	58025458 	.word	0x58025458
 80022d0:	5802546c 	.word	0x5802546c
 80022d4:	58025480 	.word	0x58025480
 80022d8:	58025494 	.word	0x58025494
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d028      	beq.n	8002334 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2201      	movs	r2, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002310:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002328:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002332:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800236e:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_GPIO_Init+0x234>)
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002372:	e194      	b.n	800269e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8186 	beq.w	8002698 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x44>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d017      	beq.n	8002442 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d123      	bne.n	8002496 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	69b9      	ldr	r1, [r7, #24]
 8002492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80e0 	beq.w	8002698 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d8:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <HAL_GPIO_Init+0x238>)
 80024da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024de:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <HAL_GPIO_Init+0x238>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_GPIO_Init+0x238>)
 80024ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f6:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_GPIO_Init+0x23c>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <HAL_GPIO_Init+0x240>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d052      	beq.n	80025c8 <HAL_GPIO_Init+0x268>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_GPIO_Init+0x244>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d031      	beq.n	800258e <HAL_GPIO_Init+0x22e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <HAL_GPIO_Init+0x248>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02b      	beq.n	800258a <HAL_GPIO_Init+0x22a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_GPIO_Init+0x24c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d025      	beq.n	8002586 <HAL_GPIO_Init+0x226>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_GPIO_Init+0x250>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x222>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_GPIO_Init+0x254>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x21e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_GPIO_Init+0x258>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x21a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_GPIO_Init+0x25c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x216>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x260>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x212>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_GPIO_Init+0x264>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x20e>
 800256a:	2309      	movs	r3, #9
 800256c:	e02d      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 800256e:	230a      	movs	r3, #10
 8002570:	e02b      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 8002572:	2308      	movs	r3, #8
 8002574:	e029      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 8002576:	2307      	movs	r3, #7
 8002578:	e027      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 800257a:	2306      	movs	r3, #6
 800257c:	e025      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 800257e:	2305      	movs	r3, #5
 8002580:	e023      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 8002582:	2304      	movs	r3, #4
 8002584:	e021      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 8002586:	2303      	movs	r3, #3
 8002588:	e01f      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 800258a:	2302      	movs	r3, #2
 800258c:	e01d      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 800258e:	2301      	movs	r3, #1
 8002590:	e01b      	b.n	80025ca <HAL_GPIO_Init+0x26a>
 8002592:	bf00      	nop
 8002594:	58000080 	.word	0x58000080
 8002598:	58024400 	.word	0x58024400
 800259c:	58000400 	.word	0x58000400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	58020400 	.word	0x58020400
 80025a8:	58020800 	.word	0x58020800
 80025ac:	58020c00 	.word	0x58020c00
 80025b0:	58021000 	.word	0x58021000
 80025b4:	58021400 	.word	0x58021400
 80025b8:	58021800 	.word	0x58021800
 80025bc:	58021c00 	.word	0x58021c00
 80025c0:	58022000 	.word	0x58022000
 80025c4:	58022400 	.word	0x58022400
 80025c8:	2300      	movs	r3, #0
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	f002 0203 	and.w	r2, r2, #3
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	4093      	lsls	r3, r2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025da:	4938      	ldr	r1, [pc, #224]	; (80026bc <HAL_GPIO_Init+0x35c>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800260e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800263c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f ae63 	bne.w	8002374 <HAL_GPIO_Init+0x14>
  }
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3724      	adds	r7, #36	; 0x24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	58000400 	.word	0x58000400

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d00a      	beq.n	800271e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e01f      	b.n	800275a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e01d      	b.n	800275a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	490f      	ldr	r1, [pc, #60]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800272e:	f7fe ff8b 	bl	8001648 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002734:	e009      	b.n	800274a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002736:	f7fe ff87 	bl	8001648 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002744:	d901      	bls.n	800274a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e007      	b.n	800275a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_PWREx_ConfigSupply+0x70>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002756:	d1ee      	bne.n	8002736 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	58024800 	.word	0x58024800

08002768 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	f000 bc48 	b.w	800300c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8088 	beq.w	800289a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b99      	ldr	r3, [pc, #612]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002794:	4b96      	ldr	r3, [pc, #600]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	2b10      	cmp	r3, #16
 800279e:	d007      	beq.n	80027b0 <HAL_RCC_OscConfig+0x48>
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	2b18      	cmp	r3, #24
 80027a4:	d111      	bne.n	80027ca <HAL_RCC_OscConfig+0x62>
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d06d      	beq.n	8002898 <HAL_RCC_OscConfig+0x130>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d169      	bne.n	8002898 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f000 bc21 	b.w	800300c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x7a>
 80027d4:	4b86      	ldr	r3, [pc, #536]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a85      	ldr	r2, [pc, #532]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e02e      	b.n	8002840 <HAL_RCC_OscConfig+0xd8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x9c>
 80027ea:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a80      	ldr	r2, [pc, #512]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b7e      	ldr	r3, [pc, #504]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7d      	ldr	r2, [pc, #500]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80027fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e01d      	b.n	8002840 <HAL_RCC_OscConfig+0xd8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0xc0>
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a74      	ldr	r2, [pc, #464]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0xd8>
 8002828:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a70      	ldr	r2, [pc, #448]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6d      	ldr	r2, [pc, #436]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fefe 	bl	8001648 <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe fefa 	bl	8001648 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e3d4      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0xe8>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe feea 	bl	8001648 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fee6 	bl	8001648 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e3c0      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800288a:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x110>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80ca 	beq.w	8002a3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a8:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028b2:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_RCC_OscConfig+0x166>
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	2b18      	cmp	r3, #24
 80028c2:	d156      	bne.n	8002972 <HAL_RCC_OscConfig+0x20a>
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d151      	bne.n	8002972 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e392      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028e6:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0219 	bic.w	r2, r3, #25
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	493f      	ldr	r1, [pc, #252]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fea6 	bl	8001648 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fea2 	bl	8001648 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e37c      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291e:	f7fe fe9f 	bl	8001660 <HAL_GetREVID>
 8002922:	4603      	mov	r3, r0
 8002924:	f241 0203 	movw	r2, #4099	; 0x1003
 8002928:	4293      	cmp	r3, r2
 800292a:	d817      	bhi.n	800295c <HAL_RCC_OscConfig+0x1f4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d108      	bne.n	8002946 <HAL_RCC_OscConfig+0x1de>
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800293c:	4a2c      	ldr	r2, [pc, #176]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	e07a      	b.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	031b      	lsls	r3, r3, #12
 8002954:	4926      	ldr	r1, [pc, #152]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295a:	e06f      	b.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4921      	ldr	r1, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	e064      	b.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d047      	beq.n	8002a0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0219 	bic.w	r2, r3, #25
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	491a      	ldr	r1, [pc, #104]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fe5c 	bl	8001648 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fe58 	bl	8001648 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e332      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	f7fe fe55 	bl	8001660 <HAL_GetREVID>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029bc:	4293      	cmp	r3, r2
 80029be:	d819      	bhi.n	80029f4 <HAL_RCC_OscConfig+0x28c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d108      	bne.n	80029da <HAL_RCC_OscConfig+0x272>
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	6053      	str	r3, [r2, #4]
 80029d8:	e030      	b.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	031b      	lsls	r3, r3, #12
 80029e8:	4901      	ldr	r1, [pc, #4]	; (80029f0 <HAL_RCC_OscConfig+0x288>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
 80029ee:	e025      	b.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
 80029f0:	58024400 	.word	0x58024400
 80029f4:	4b9a      	ldr	r3, [pc, #616]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	4997      	ldr	r1, [pc, #604]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e018      	b.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b95      	ldr	r3, [pc, #596]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a94      	ldr	r2, [pc, #592]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe fe17 	bl	8001648 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fe13 	bl	8001648 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e2ed      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a30:	4b8b      	ldr	r3, [pc, #556]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a9 	beq.w	8002b9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4a:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a54:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d007      	beq.n	8002a70 <HAL_RCC_OscConfig+0x308>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b18      	cmp	r3, #24
 8002a64:	d13a      	bne.n	8002adc <HAL_RCC_OscConfig+0x374>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d135      	bne.n	8002adc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a70:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x320>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e2c1      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a88:	f7fe fdea 	bl	8001660 <HAL_GetREVID>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d817      	bhi.n	8002ac6 <HAL_RCC_OscConfig+0x35e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d108      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x348>
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002aa6:	4a6e      	ldr	r2, [pc, #440]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aae:	e075      	b.n	8002b9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab0:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	4968      	ldr	r1, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ac4:	e06a      	b.n	8002b9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	061b      	lsls	r3, r3, #24
 8002ad4:	4962      	ldr	r1, [pc, #392]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ada:	e05f      	b.n	8002b9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d042      	beq.n	8002b6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a5d      	ldr	r2, [pc, #372]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fdaa 	bl	8001648 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002af8:	f7fe fda6 	bl	8001648 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e280      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b16:	f7fe fda3 	bl	8001660 <HAL_GetREVID>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d817      	bhi.n	8002b54 <HAL_RCC_OscConfig+0x3ec>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d108      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3d6>
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b34:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b3a:	6053      	str	r3, [r2, #4]
 8002b3c:	e02e      	b.n	8002b9c <HAL_RCC_OscConfig+0x434>
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	4944      	ldr	r1, [pc, #272]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
 8002b52:	e023      	b.n	8002b9c <HAL_RCC_OscConfig+0x434>
 8002b54:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	493f      	ldr	r1, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e018      	b.n	8002b9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fd67 	bl	8001648 <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fd63 	bl	8001648 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e23d      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d036      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d019      	beq.n	8002be4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	4a2a      	ldr	r2, [pc, #168]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fd44 	bl	8001648 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fd40 	bl	8001648 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e21a      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x45c>
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fd2a 	bl	8001648 <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fd26 	bl	8001648 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e200      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d039      	beq.n	8002c96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fd07 	bl	8001648 <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c3e:	f7fe fd03 	bl	8001648 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1dd      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x4d6>
 8002c5c:	e01b      	b.n	8002c96 <HAL_RCC_OscConfig+0x52e>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c64:	4b9b      	ldr	r3, [pc, #620]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a9a      	ldr	r2, [pc, #616]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c70:	f7fe fcea 	bl	8001648 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c78:	f7fe fce6 	bl	8001648 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1c0      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c8a:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8081 	beq.w	8002da6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_OscConfig+0x770>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a8b      	ldr	r2, [pc, #556]	; (8002ed8 <HAL_RCC_OscConfig+0x770>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fcca 	bl	8001648 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb8:	f7fe fcc6 	bl	8001648 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1a0      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cca:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <HAL_RCC_OscConfig+0x770>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x584>
 8002cde:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a7c      	ldr	r2, [pc, #496]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e02d      	b.n	8002d48 <HAL_RCC_OscConfig+0x5e0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5a6>
 8002cf4:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a76      	ldr	r2, [pc, #472]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	4b74      	ldr	r3, [pc, #464]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a73      	ldr	r2, [pc, #460]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x5e0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c8>
 8002d16:	4b6f      	ldr	r3, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	4b6c      	ldr	r3, [pc, #432]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a6b      	ldr	r2, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0x5e0>
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a64      	ldr	r2, [pc, #400]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d42:	f023 0304 	bic.w	r3, r3, #4
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe fc7a 	bl	8001648 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe fc76 	bl	8001648 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e14e      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d6e:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ee      	beq.n	8002d58 <HAL_RCC_OscConfig+0x5f0>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fc64 	bl	8001648 <HAL_GetTick>
 8002d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fc60 	bl	8001648 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e138      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1ee      	bne.n	8002d84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 812d 	beq.w	800300a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db8:	2b18      	cmp	r3, #24
 8002dba:	f000 80bd 	beq.w	8002f38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	f040 809e 	bne.w	8002f04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fc38 	bl	8001648 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fc34 	bl	8001648 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e10e      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dee:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	4931      	ldr	r1, [pc, #196]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	628b      	str	r3, [r1, #40]	; 0x28
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	3b01      	subs	r3, #1
 8002e24:	025b      	lsls	r3, r3, #9
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e44:	4923      	ldr	r1, [pc, #140]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_OscConfig+0x778>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e62:	00d2      	lsls	r2, r2, #3
 8002e64:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f023 020c 	bic.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4917      	ldr	r1, [pc, #92]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f023 0202 	bic.w	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	4912      	ldr	r1, [pc, #72]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe fbbd 	bl	8001648 <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed0:	e011      	b.n	8002ef6 <HAL_RCC_OscConfig+0x78e>
 8002ed2:	bf00      	nop
 8002ed4:	58024400 	.word	0x58024400
 8002ed8:	58024800 	.word	0x58024800
 8002edc:	fffffc0c 	.word	0xfffffc0c
 8002ee0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fbb0 	bl	8001648 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e08a      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x77c>
 8002f02:	e082      	b.n	800300a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fb9a 	bl	8001648 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fb96 	bl	8001648 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e070      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x7b0>
 8002f36:	e068      	b.n	800300a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f3e:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d031      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d12a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d122      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0a5b      	lsrs	r3, r3, #9
 8002f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e02b      	b.n	800300c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d01f      	beq.n	800300a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fd6:	f7fe fb37 	bl	8001648 <HAL_GetTick>
 8002fda:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002fdc:	bf00      	nop
 8002fde:	f7fe fb33 	bl	8001648 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d0f9      	beq.n	8002fde <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_RCC_OscConfig+0x8b0>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ff6:	00d2      	lsls	r2, r2, #3
 8002ff8:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_RCC_OscConfig+0x8ac>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3730      	adds	r7, #48	; 0x30
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	58024400 	.word	0x58024400
 8003018:	ffff0007 	.word	0xffff0007

0800301c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e19c      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b8a      	ldr	r3, [pc, #552]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d910      	bls.n	8003060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b87      	ldr	r3, [pc, #540]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	4985      	ldr	r1, [pc, #532]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b83      	ldr	r3, [pc, #524]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e184      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d908      	bls.n	800308e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800307c:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4975      	ldr	r1, [pc, #468]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800308a:	4313      	orrs	r3, r2
 800308c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b70      	ldr	r3, [pc, #448]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d908      	bls.n	80030bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	496a      	ldr	r1, [pc, #424]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	4b64      	ldr	r3, [pc, #400]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d908      	bls.n	80030ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d8:	4b61      	ldr	r3, [pc, #388]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	495e      	ldr	r1, [pc, #376]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d908      	bls.n	8003118 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003106:	4b56      	ldr	r3, [pc, #344]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4953      	ldr	r1, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4b4d      	ldr	r3, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	429a      	cmp	r2, r3
 8003132:	d908      	bls.n	8003146 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f023 020f 	bic.w	r2, r3, #15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4947      	ldr	r1, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003142:	4313      	orrs	r3, r2
 8003144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d055      	beq.n	80031fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003152:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4940      	ldr	r1, [pc, #256]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d107      	bne.n	800317c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800316c:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d121      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0f6      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d115      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0ea      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319c:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0de      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d6      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f023 0207 	bic.w	r2, r3, #7
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4925      	ldr	r1, [pc, #148]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ce:	f7fe fa3b 	bl	8001648 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7fe fa37 	bl	8001648 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0be      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d1eb      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	429a      	cmp	r2, r3
 8003218:	d208      	bcs.n	800322c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f023 020f 	bic.w	r2, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003228:	4313      	orrs	r3, r2
 800322a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d214      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 020f 	bic.w	r2, r3, #15
 8003242:	4906      	ldr	r1, [pc, #24]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e086      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
 800325c:	52002000 	.word	0x52002000
 8003260:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800327c:	429a      	cmp	r2, r3
 800327e:	d208      	bcs.n	8003292 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003280:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4939      	ldr	r1, [pc, #228]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 800328e:	4313      	orrs	r3, r2
 8003290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d208      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	492e      	ldr	r1, [pc, #184]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032d8:	429a      	cmp	r2, r3
 80032da:	d208      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4922      	ldr	r1, [pc, #136]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d208      	bcs.n	800331c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4917      	ldr	r1, [pc, #92]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003318:	4313      	orrs	r3, r2
 800331a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800331c:	f000 f834 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4912      	ldr	r1, [pc, #72]	; (8003378 <HAL_RCC_ClockConfig+0x35c>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_RCC_ClockConfig+0x35c>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x360>)
 8003352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_RCC_ClockConfig+0x364>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x368>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe f928 	bl	80015b4 <HAL_InitTick>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400
 8003378:	08007edc 	.word	0x08007edc
 800337c:	24000084 	.word	0x24000084
 8003380:	24000080 	.word	0x24000080
 8003384:	24000088 	.word	0x24000088

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338e:	4bb3      	ldr	r3, [pc, #716]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003396:	2b18      	cmp	r3, #24
 8003398:	f200 8155 	bhi.w	8003646 <HAL_RCC_GetSysClockFreq+0x2be>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	08003409 	.word	0x08003409
 80033a8:	08003647 	.word	0x08003647
 80033ac:	08003647 	.word	0x08003647
 80033b0:	08003647 	.word	0x08003647
 80033b4:	08003647 	.word	0x08003647
 80033b8:	08003647 	.word	0x08003647
 80033bc:	08003647 	.word	0x08003647
 80033c0:	08003647 	.word	0x08003647
 80033c4:	0800342f 	.word	0x0800342f
 80033c8:	08003647 	.word	0x08003647
 80033cc:	08003647 	.word	0x08003647
 80033d0:	08003647 	.word	0x08003647
 80033d4:	08003647 	.word	0x08003647
 80033d8:	08003647 	.word	0x08003647
 80033dc:	08003647 	.word	0x08003647
 80033e0:	08003647 	.word	0x08003647
 80033e4:	08003435 	.word	0x08003435
 80033e8:	08003647 	.word	0x08003647
 80033ec:	08003647 	.word	0x08003647
 80033f0:	08003647 	.word	0x08003647
 80033f4:	08003647 	.word	0x08003647
 80033f8:	08003647 	.word	0x08003647
 80033fc:	08003647 	.word	0x08003647
 8003400:	08003647 	.word	0x08003647
 8003404:	0800343b 	.word	0x0800343b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003408:	4b94      	ldr	r3, [pc, #592]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003414:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	08db      	lsrs	r3, r3, #3
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	4a90      	ldr	r2, [pc, #576]	; (8003660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003426:	e111      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003428:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800342a:	61bb      	str	r3, [r7, #24]
      break;
 800342c:	e10e      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800342e:	4b8d      	ldr	r3, [pc, #564]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003430:	61bb      	str	r3, [r7, #24]
      break;
 8003432:	e10b      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003434:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003436:	61bb      	str	r3, [r7, #24]
      break;
 8003438:	e108      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003444:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003450:	4b82      	ldr	r3, [pc, #520]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800345a:	4b80      	ldr	r3, [pc, #512]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80e1 	beq.w	8003640 <HAL_RCC_GetSysClockFreq+0x2b8>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b02      	cmp	r3, #2
 8003482:	f000 8083 	beq.w	800358c <HAL_RCC_GetSysClockFreq+0x204>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	f200 80a1 	bhi.w	80035d0 <HAL_RCC_GetSysClockFreq+0x248>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x114>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d056      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x1c0>
 800349a:	e099      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02d      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034a8:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	4a6b      	ldr	r2, [pc, #428]	; (8003660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003502:	e087      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003670 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a02 	vldr	s12, [r7, #8]
 800352a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003546:	e065      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003552:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356a:	ed97 6a02 	vldr	s12, [r7, #8]
 800356e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800358a:	e043      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003596:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003678 <HAL_RCC_GetSysClockFreq+0x2f0>
 800359a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ce:	e021      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003612:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	0a5b      	lsrs	r3, r3, #9
 800361a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361e:	3301      	adds	r3, #1
 8003620:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800362c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	ee17 3a90 	vmov	r3, s15
 800363c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800363e:	e005      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
      break;
 8003644:	e002      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003648:	61bb      	str	r3, [r7, #24]
      break;
 800364a:	bf00      	nop
  }

  return sysclockfreq;
 800364c:	69bb      	ldr	r3, [r7, #24]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	03d09000 	.word	0x03d09000
 8003664:	003d0900 	.word	0x003d0900
 8003668:	017d7840 	.word	0x017d7840
 800366c:	46000000 	.word	0x46000000
 8003670:	4c742400 	.word	0x4c742400
 8003674:	4a742400 	.word	0x4a742400
 8003678:	4bbebc20 	.word	0x4bbebc20

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003682:	f7ff fe81 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCC_GetHCLKFreq+0x50>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490f      	ldr	r1, [pc, #60]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <HAL_RCC_GetHCLKFreq+0x50>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	58024400 	.word	0x58024400
 80036d0:	08007edc 	.word	0x08007edc
 80036d4:	24000084 	.word	0x24000084
 80036d8:	24000080 	.word	0x24000080

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036e0:	f7ff ffcc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	58024400 	.word	0x58024400
 8003704:	08007edc 	.word	0x08007edc

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800370c:	f7ff ffb6 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	58024400 	.word	0x58024400
 8003730:	08007edc 	.word	0x08007edc

08003734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b0ca      	sub	sp, #296	; 0x128
 800373a:	af00      	add	r7, sp, #0
 800373c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003746:	2300      	movs	r3, #0
 8003748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003758:	2500      	movs	r5, #0
 800375a:	ea54 0305 	orrs.w	r3, r4, r5
 800375e:	d049      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800376a:	d02f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800376c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003770:	d828      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003776:	d01a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377c:	d822      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003786:	d007      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003788:	e01c      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378a:	4bb8      	ldr	r3, [pc, #736]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	4ab7      	ldr	r2, [pc, #732]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003796:	e01a      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	3308      	adds	r3, #8
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fc8f 	bl	80050c4 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ac:	e00f      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b2:	3328      	adds	r3, #40	; 0x28
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fd36 	bl	8005228 <RCCEx_PLL3_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037d6:	4ba5      	ldr	r3, [pc, #660]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e4:	4aa1      	ldr	r2, [pc, #644]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6513      	str	r3, [r2, #80]	; 0x50
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003800:	f04f 0900 	mov.w	r9, #0
 8003804:	ea58 0309 	orrs.w	r3, r8, r9
 8003808:	d047      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	2b04      	cmp	r3, #4
 8003812:	d82a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	08003831 	.word	0x08003831
 8003820:	0800383f 	.word	0x0800383f
 8003824:	08003855 	.word	0x08003855
 8003828:	08003873 	.word	0x08003873
 800382c:	08003873 	.word	0x08003873
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4a8d      	ldr	r2, [pc, #564]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800383c:	e01a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003842:	3308      	adds	r3, #8
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fc3c 	bl	80050c4 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003852:	e00f      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	3328      	adds	r3, #40	; 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fce3 	bl	8005228 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800387c:	4b7b      	ldr	r3, [pc, #492]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	f023 0107 	bic.w	r1, r3, #7
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4a78      	ldr	r2, [pc, #480]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388c:	430b      	orrs	r3, r1
 800388e:	6513      	str	r3, [r2, #80]	; 0x50
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80038a6:	f04f 0b00 	mov.w	fp, #0
 80038aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80038ae:	d04c      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ba:	d030      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d829      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038c2:	2bc0      	cmp	r3, #192	; 0xc0
 80038c4:	d02d      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038c6:	2bc0      	cmp	r3, #192	; 0xc0
 80038c8:	d825      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d018      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d821      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d007      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038da:	e01c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038dc:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a62      	ldr	r2, [pc, #392]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038e8:	e01c      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ee:	3308      	adds	r3, #8
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fbe6 	bl	80050c4 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038fe:	e011      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003904:	3328      	adds	r3, #40	; 0x28
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f001 fc8d 	bl	8005228 <RCCEx_PLL3_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	4a4c      	ldr	r2, [pc, #304]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6513      	str	r3, [r2, #80]	; 0x50
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003956:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003960:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d053      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003972:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003976:	d035      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800397c:	d82e      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800397e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003982:	d031      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003984:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003988:	d828      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398e:	d01a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d822      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800399a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800399e:	d007      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039a0:	e01c      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a2:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	4a31      	ldr	r2, [pc, #196]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ae:	e01c      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	3308      	adds	r3, #8
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fb83 	bl	80050c4 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039c4:	e011      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	3328      	adds	r3, #40	; 0x28
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fc2a 	bl	8005228 <RCCEx_PLL3_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039da:	e006      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039e2:	e002      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d056      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3e:	d038      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a44:	d831      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a4a:	d034      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a50:	d82b      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a56:	d01d      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a5c:	d825      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a68:	e01f      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a6a:	bf00      	nop
 8003a6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a70:	4ba2      	ldr	r3, [pc, #648]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4aa1      	ldr	r2, [pc, #644]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3308      	adds	r3, #8
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fb1c 	bl	80050c4 <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a92:	e011      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	3328      	adds	r3, #40	; 0x28
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fbc3 	bl	8005228 <RCCEx_PLL3_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e006      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ac0:	4b8e      	ldr	r3, [pc, #568]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003acc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ad0:	4a8a      	ldr	r2, [pc, #552]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003adc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003aec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003af6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d03a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	2b30      	cmp	r3, #48	; 0x30
 8003b08:	d01f      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b0a:	2b30      	cmp	r3, #48	; 0x30
 8003b0c:	d819      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d00c      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d815      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d019      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d111      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1e:	4b77      	ldr	r3, [pc, #476]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4a76      	ldr	r2, [pc, #472]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	3308      	adds	r3, #8
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fac5 	bl	80050c4 <RCCEx_PLL2_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b66:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b6c:	e003      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4313      	orrs	r3, r2
 8003b94:	d051      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba0:	d035      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d82e      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bac:	d031      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bb2:	d828      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	d822      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d007      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bca:	e01c      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bd8:	e01c      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bde:	3308      	adds	r3, #8
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fa6e 	bl	80050c4 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bee:	e011      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf4:	3328      	adds	r3, #40	; 0x28
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fb15 	bl	8005228 <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c04:	e006      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c0c:	e002      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c1c:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d056      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c64:	d033      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c6a:	d82c      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c70:	d02f      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c76:	d826      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c7c:	d02b      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c82:	d820      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c88:	d012      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c8e:	d81a      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d022      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d115      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 fa0e 	bl	80050c4 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cae:	e015      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	3328      	adds	r3, #40	; 0x28
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 fab5 	bl	8005228 <RCCEx_PLL3_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ccc:	e006      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e004      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf2:	4a02      	ldr	r2, [pc, #8]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6513      	str	r3, [r2, #80]	; 0x50
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d055      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d34:	d033      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d3a:	d82c      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d40:	d02f      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d46:	d826      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d4c:	d02b      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d52:	d820      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d58:	d012      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5e:	d81a      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d022      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d68:	d115      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6e:	3308      	adds	r3, #8
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 f9a6 	bl	80050c4 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e015      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d84:	3328      	adds	r3, #40	; 0x28
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fa4d 	bl	8005228 <RCCEx_PLL3_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d94:	e00a      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e004      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003da2:	bf00      	nop
 8003da4:	e002      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003db4:	4ba3      	ldr	r3, [pc, #652]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dc4:	4a9f      	ldr	r2, [pc, #636]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d037      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfe:	d00e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e04:	d816      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e0e:	d111      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e10:	4b8c      	ldr	r3, [pc, #560]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	4a8b      	ldr	r2, [pc, #556]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3308      	adds	r3, #8
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f94c 	bl	80050c4 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e46:	4b7f      	ldr	r3, [pc, #508]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a7b      	ldr	r2, [pc, #492]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6513      	str	r3, [r2, #80]	; 0x50
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d039      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d81c      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ed1 	.word	0x08003ed1
 8003e98:	08003ea5 	.word	0x08003ea5
 8003e9c:	08003eb3 	.word	0x08003eb3
 8003ea0:	08003ed1 	.word	0x08003ed1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4b67      	ldr	r3, [pc, #412]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4a66      	ldr	r2, [pc, #408]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003eb0:	e00f      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f902 	bl	80050c4 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eda:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	f023 0103 	bic.w	r1, r3, #3
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	4a56      	ldr	r2, [pc, #344]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eea:	430b      	orrs	r3, r1
 8003eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f000 809f 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f1a:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f26:	f7fd fb8f 	bl	8001648 <HAL_GetTick>
 8003f2a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f30:	f7fd fb8a 	bl	8001648 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b64      	cmp	r3, #100	; 0x64
 8003f3e:	d903      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f46:	e005      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f48:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ed      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d179      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f68:	4053      	eors	r3, r2
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d015      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a30      	ldr	r2, [pc, #192]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f96:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003faa:	d118      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd fb4c 	bl	8001648 <HAL_GetTick>
 8003fb0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb4:	e00d      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fd fb47 	bl	8001648 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fc0:	1ad2      	subs	r2, r2, r3
 8003fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d903      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003fd0:	e005      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0eb      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d129      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff6:	d10e      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ff8:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004008:	091a      	lsrs	r2, r3, #4
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800400c:	4013      	ands	r3, r2
 800400e:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004010:	430b      	orrs	r3, r1
 8004012:	6113      	str	r3, [r2, #16]
 8004014:	e005      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004020:	6113      	str	r3, [r2, #16]
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004024:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800402e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	e00e      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800403a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004044:	58024400 	.word	0x58024400
 8004048:	58024800 	.word	0x58024800
 800404c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 0301 	and.w	r3, r2, #1
 8004064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800406e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	f000 8089 	beq.w	800418c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004080:	2b28      	cmp	r3, #40	; 0x28
 8004082:	d86b      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	08004165 	.word	0x08004165
 8004090:	0800415d 	.word	0x0800415d
 8004094:	0800415d 	.word	0x0800415d
 8004098:	0800415d 	.word	0x0800415d
 800409c:	0800415d 	.word	0x0800415d
 80040a0:	0800415d 	.word	0x0800415d
 80040a4:	0800415d 	.word	0x0800415d
 80040a8:	0800415d 	.word	0x0800415d
 80040ac:	08004131 	.word	0x08004131
 80040b0:	0800415d 	.word	0x0800415d
 80040b4:	0800415d 	.word	0x0800415d
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	0800415d 	.word	0x0800415d
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	0800415d 	.word	0x0800415d
 80040c8:	0800415d 	.word	0x0800415d
 80040cc:	08004147 	.word	0x08004147
 80040d0:	0800415d 	.word	0x0800415d
 80040d4:	0800415d 	.word	0x0800415d
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	0800415d 	.word	0x0800415d
 80040e0:	0800415d 	.word	0x0800415d
 80040e4:	0800415d 	.word	0x0800415d
 80040e8:	0800415d 	.word	0x0800415d
 80040ec:	08004165 	.word	0x08004165
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	0800415d 	.word	0x0800415d
 8004100:	0800415d 	.word	0x0800415d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	0800415d 	.word	0x0800415d
 800410c:	08004165 	.word	0x08004165
 8004110:	0800415d 	.word	0x0800415d
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800415d 	.word	0x0800415d
 800411c:	0800415d 	.word	0x0800415d
 8004120:	0800415d 	.word	0x0800415d
 8004124:	0800415d 	.word	0x0800415d
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004165 	.word	0x08004165
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004134:	3308      	adds	r3, #8
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f000 ffc3 	bl	80050c4 <RCCEx_PLL2_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004144:	e00f      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414a:	3328      	adds	r3, #40	; 0x28
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f86a 	bl	8005228 <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800416e:	4bbf      	ldr	r3, [pc, #764]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417c:	4abb      	ldr	r2, [pc, #748]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6553      	str	r3, [r2, #84]	; 0x54
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f002 0302 	and.w	r3, r2, #2
 8004198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d041      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d824      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	08004209 	.word	0x08004209
 80041c0:	080041d5 	.word	0x080041d5
 80041c4:	080041eb 	.word	0x080041eb
 80041c8:	08004209 	.word	0x08004209
 80041cc:	08004209 	.word	0x08004209
 80041d0:	08004209 	.word	0x08004209
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d8:	3308      	adds	r3, #8
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 ff71 	bl	80050c4 <RCCEx_PLL2_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041e8:	e00f      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ee:	3328      	adds	r3, #40	; 0x28
 80041f0:	2101      	movs	r1, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 f818 	bl	8005228 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004212:	4b96      	ldr	r3, [pc, #600]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f023 0107 	bic.w	r1, r3, #7
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004220:	4a92      	ldr	r2, [pc, #584]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004222:	430b      	orrs	r3, r1
 8004224:	6553      	str	r3, [r2, #84]	; 0x54
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800422c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f002 0304 	and.w	r3, r2, #4
 800423c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d044      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004258:	2b05      	cmp	r3, #5
 800425a:	d825      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	080042b1 	.word	0x080042b1
 8004268:	0800427d 	.word	0x0800427d
 800426c:	08004293 	.word	0x08004293
 8004270:	080042b1 	.word	0x080042b1
 8004274:	080042b1 	.word	0x080042b1
 8004278:	080042b1 	.word	0x080042b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004280:	3308      	adds	r3, #8
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f000 ff1d 	bl	80050c4 <RCCEx_PLL2_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004290:	e00f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	3328      	adds	r3, #40	; 0x28
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 ffc4 	bl	8005228 <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ba:	4b6c      	ldr	r3, [pc, #432]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f023 0107 	bic.w	r1, r3, #7
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ca:	4a68      	ldr	r2, [pc, #416]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6593      	str	r3, [r2, #88]	; 0x58
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f002 0320 	and.w	r3, r2, #32
 80042e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d055      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004306:	d033      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800430c:	d82c      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d02f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d826      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800431a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800431e:	d02b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004320:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004324:	d820      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432a:	d012      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800432c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004330:	d81a      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d022      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800433a:	d115      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	3308      	adds	r3, #8
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 febd 	bl	80050c4 <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004350:	e015      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	3328      	adds	r3, #40	; 0x28
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f000 ff64 	bl	8005228 <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004366:	e00a      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800436e:	e006      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004370:	bf00      	nop
 8004372:	e004      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004386:	4b39      	ldr	r3, [pc, #228]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	4a35      	ldr	r2, [pc, #212]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6553      	str	r3, [r2, #84]	; 0x54
 800439c:	e003      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80043b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80043bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d058      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043d2:	d033      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043d8:	d82c      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	d02f      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d826      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ea:	d02b      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043f0:	d820      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f6:	d012      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fc:	d81a      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d022      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d115      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	3308      	adds	r3, #8
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fe57 	bl	80050c4 <RCCEx_PLL2_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800441c:	e015      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004422:	3328      	adds	r3, #40	; 0x28
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fefe 	bl	8005228 <RCCEx_PLL3_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004432:	e00a      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800443a:	e006      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800443c:	bf00      	nop
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004462:	4a02      	ldr	r2, [pc, #8]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004464:	430b      	orrs	r3, r1
 8004466:	6593      	str	r3, [r2, #88]	; 0x58
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800448e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d055      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044a4:	d033      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80044a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044aa:	d82c      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d02f      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b6:	d826      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044bc:	d02b      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80044be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044c2:	d820      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c8:	d012      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ce:	d81a      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d022      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d8:	d115      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044de:	3308      	adds	r3, #8
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fdee 	bl	80050c4 <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044ee:	e015      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	3328      	adds	r3, #40	; 0x28
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fe95 	bl	8005228 <RCCEx_PLL3_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004504:	e00a      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800450c:	e006      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800450e:	bf00      	nop
 8004510:	e004      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004524:	4ba1      	ldr	r3, [pc, #644]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004534:	4a9d      	ldr	r2, [pc, #628]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004536:	430b      	orrs	r3, r1
 8004538:	6593      	str	r3, [r2, #88]	; 0x58
 800453a:	e003      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f002 0308 	and.w	r3, r2, #8
 8004550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800455a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d01e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d10c      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004576:	3328      	adds	r3, #40	; 0x28
 8004578:	2102      	movs	r1, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fe54 	bl	8005228 <RCCEx_PLL3_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800458c:	4b87      	ldr	r3, [pc, #540]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	4a83      	ldr	r2, [pc, #524]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459e:	430b      	orrs	r3, r1
 80045a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f002 0310 	and.w	r3, r2, #16
 80045ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d01e      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d10c      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	3328      	adds	r3, #40	; 0x28
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fe25 	bl	8005228 <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ea:	4b70      	ldr	r3, [pc, #448]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045fa:	4a6c      	ldr	r2, [pc, #432]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800460c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004610:	2300      	movs	r3, #0
 8004612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004616:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800461a:	460b      	mov	r3, r1
 800461c:	4313      	orrs	r3, r2
 800461e:	d03e      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004624:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800462c:	d022      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800462e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004632:	d81b      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d00b      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800463e:	e015      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004644:	3308      	adds	r3, #8
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fd3b 	bl	80050c4 <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004654:	e00f      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	3328      	adds	r3, #40	; 0x28
 800465c:	2102      	movs	r1, #2
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fde2 	bl	8005228 <RCCEx_PLL3_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800466a:	e004      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467e:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800468e:	4a47      	ldr	r2, [pc, #284]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6593      	str	r3, [r2, #88]	; 0x58
 8004694:	e003      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80046aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ac:	2300      	movs	r3, #0
 80046ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d03b      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046c6:	d01f      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046cc:	d818      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d2:	d003      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d8:	d007      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046da:	e011      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	4b33      	ldr	r3, [pc, #204]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	4a32      	ldr	r2, [pc, #200]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046e8:	e00f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	3328      	adds	r3, #40	; 0x28
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fd98 	bl	8005228 <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80046fe:	e004      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	4a22      	ldr	r2, [pc, #136]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6553      	str	r3, [r2, #84]	; 0x54
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800473e:	673b      	str	r3, [r7, #112]	; 0x70
 8004740:	2300      	movs	r3, #0
 8004742:	677b      	str	r3, [r7, #116]	; 0x74
 8004744:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d034      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475c:	d007      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800475e:	e011      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004760:	4b12      	ldr	r3, [pc, #72]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	4a11      	ldr	r2, [pc, #68]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800476c:	e00e      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	3308      	adds	r3, #8
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fca4 	bl	80050c4 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800478a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10d      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	4a02      	ldr	r2, [pc, #8]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a4:	430b      	orrs	r3, r1
 80047a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047a8:	e006      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80047c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c6:	2300      	movs	r3, #0
 80047c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80047ce:	460b      	mov	r3, r1
 80047d0:	4313      	orrs	r3, r2
 80047d2:	d00c      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d8:	3328      	adds	r3, #40	; 0x28
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fd23 	bl	8005228 <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80047fa:	663b      	str	r3, [r7, #96]	; 0x60
 80047fc:	2300      	movs	r3, #0
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004800:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d038      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004816:	d018      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481c:	d811      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d014      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004828:	d80b      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d011      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800482e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004832:	d106      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004834:	4bc3      	ldr	r3, [pc, #780]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4ac2      	ldr	r2, [pc, #776]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004840:	e008      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004848:	e004      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800485c:	4bb9      	ldr	r3, [pc, #740]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486c:	4ab5      	ldr	r2, [pc, #724]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486e:	430b      	orrs	r3, r1
 8004870:	6553      	str	r3, [r2, #84]	; 0x54
 8004872:	e003      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004888:	65bb      	str	r3, [r7, #88]	; 0x58
 800488a:	2300      	movs	r3, #0
 800488c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004898:	4baa      	ldr	r3, [pc, #680]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	4aa7      	ldr	r2, [pc, #668]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80048b8:	653b      	str	r3, [r7, #80]	; 0x50
 80048ba:	2300      	movs	r3, #0
 80048bc:	657b      	str	r3, [r7, #84]	; 0x54
 80048be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048c8:	4b9e      	ldr	r3, [pc, #632]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048d8:	4a9a      	ldr	r2, [pc, #616]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ec:	2300      	movs	r3, #0
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048fa:	4b92      	ldr	r3, [pc, #584]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004908:	4a8e      	ldr	r2, [pc, #568]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490a:	430b      	orrs	r3, r1
 800490c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
 800491c:	2300      	movs	r3, #0
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
 8004920:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004924:	460b      	mov	r3, r1
 8004926:	4313      	orrs	r3, r2
 8004928:	d00e      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800492a:	4b86      	ldr	r3, [pc, #536]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	4a85      	ldr	r2, [pc, #532]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004934:	6113      	str	r3, [r2, #16]
 8004936:	4b83      	ldr	r3, [pc, #524]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004938:	6919      	ldr	r1, [r3, #16]
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004942:	4a80      	ldr	r2, [pc, #512]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004944:	430b      	orrs	r3, r1
 8004946:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004954:	63bb      	str	r3, [r7, #56]	; 0x38
 8004956:	2300      	movs	r3, #0
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004964:	4b77      	ldr	r3, [pc, #476]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	4a74      	ldr	r2, [pc, #464]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004974:	430b      	orrs	r3, r1
 8004976:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
 8004986:	2300      	movs	r3, #0
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
 800498a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800498e:	460b      	mov	r3, r1
 8004990:	4313      	orrs	r3, r2
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a4:	4a67      	ldr	r2, [pc, #412]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	2100      	movs	r1, #0
 80049b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049c0:	460b      	mov	r3, r1
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d011      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ca:	3308      	adds	r3, #8
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fb78 	bl	80050c4 <RCCEx_PLL2_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	2100      	movs	r1, #0
 80049f4:	6239      	str	r1, [r7, #32]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
 80049fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a00:	460b      	mov	r3, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	d011      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fb58 	bl	80050c4 <RCCEx_PLL2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	2100      	movs	r1, #0
 8004a34:	61b9      	str	r1, [r7, #24]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a40:	460b      	mov	r3, r1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	d011      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb38 	bl	80050c4 <RCCEx_PLL2_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	2100      	movs	r1, #0
 8004a74:	6139      	str	r1, [r7, #16]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a80:	460b      	mov	r3, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	d011      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8a:	3328      	adds	r3, #40	; 0x28
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbca 	bl	8005228 <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d011      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aca:	3328      	adds	r3, #40	; 0x28
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fbaa 	bl	8005228 <RCCEx_PLL3_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	2100      	movs	r1, #0
 8004af4:	6039      	str	r1, [r7, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d011      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0a:	3328      	adds	r3, #40	; 0x28
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb8a 	bl	8005228 <RCCEx_PLL3_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004b2a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b44:	58024400 	.word	0x58024400

08004b48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b4c:	f7fe fd96 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4904      	ldr	r1, [pc, #16]	; (8004b70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	08007edc 	.word	0x08007edc

08004b74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b7c:	4ba1      	ldr	r3, [pc, #644]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b86:	4b9f      	ldr	r3, [pc, #636]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	0b1b      	lsrs	r3, r3, #12
 8004b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b92:	4b9c      	ldr	r3, [pc, #624]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b9e:	4b99      	ldr	r3, [pc, #612]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	08db      	lsrs	r3, r3, #3
 8004ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8111 	beq.w	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f000 8083 	beq.w	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	f200 80a1 	bhi.w	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d056      	beq.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004bde:	e099      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be0:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02d      	beq.n	8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bec:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	08db      	lsrs	r3, r3, #3
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	4a84      	ldr	r2, [pc, #528]	; (8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c46:	e087      	b.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b6a      	ldr	r3, [pc, #424]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8a:	e065      	b.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cce:	e043      	b.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b48      	ldr	r3, [pc, #288]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d12:	e021      	b.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d58:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	0a5b      	lsrs	r3, r3, #9
 8004d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7e:	ee17 2a90 	vmov	r2, s15
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d86:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dac:	ee17 2a90 	vmov	r2, s15
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	0e1b      	lsrs	r3, r3, #24
 8004dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dda:	ee17 2a90 	vmov	r2, s15
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004de2:	e008      	b.n	8004df6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]
}
 8004df6:	bf00      	nop
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400
 8004e08:	03d09000 	.word	0x03d09000
 8004e0c:	46000000 	.word	0x46000000
 8004e10:	4c742400 	.word	0x4c742400
 8004e14:	4a742400 	.word	0x4a742400
 8004e18:	4bbebc20 	.word	0x4bbebc20

08004e1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e24:	4ba1      	ldr	r3, [pc, #644]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e2e:	4b9f      	ldr	r3, [pc, #636]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	0d1b      	lsrs	r3, r3, #20
 8004e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e3a:	4b9c      	ldr	r3, [pc, #624]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e46:	4b99      	ldr	r3, [pc, #612]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	08db      	lsrs	r3, r3, #3
 8004e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8111 	beq.w	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f000 8083 	beq.w	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f200 80a1 	bhi.w	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d056      	beq.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e86:	e099      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e88:	4b88      	ldr	r3, [pc, #544]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02d      	beq.n	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e94:	4b85      	ldr	r3, [pc, #532]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	08db      	lsrs	r3, r3, #3
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	4a84      	ldr	r2, [pc, #528]	; (80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebe:	4b7b      	ldr	r3, [pc, #492]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004eee:	e087      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f32:	e065      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b59      	ldr	r3, [pc, #356]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f76:	e043      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b48      	ldr	r3, [pc, #288]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fba:	e021      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b37      	ldr	r3, [pc, #220]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	0a5b      	lsrs	r3, r3, #9
 8005006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501a:	edd7 6a07 	vldr	s13, [r7, #28]
 800501e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005026:	ee17 2a90 	vmov	r2, s15
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005048:	edd7 6a07 	vldr	s13, [r7, #28]
 800504c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005054:	ee17 2a90 	vmov	r2, s15
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	0e1b      	lsrs	r3, r3, #24
 8005062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005076:	edd7 6a07 	vldr	s13, [r7, #28]
 800507a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800507e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005082:	ee17 2a90 	vmov	r2, s15
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800508a:	e008      	b.n	800509e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
}
 800509e:	bf00      	nop
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400
 80050b0:	03d09000 	.word	0x03d09000
 80050b4:	46000000 	.word	0x46000000
 80050b8:	4c742400 	.word	0x4c742400
 80050bc:	4a742400 	.word	0x4a742400
 80050c0:	4bbebc20 	.word	0x4bbebc20

080050c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d101      	bne.n	80050e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e099      	b.n	8005216 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050e2:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4e      	ldr	r2, [pc, #312]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fc faab 	bl	8001648 <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050f4:	e008      	b.n	8005108 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050f6:	f7fc faa7 	bl	8001648 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e086      	b.n	8005216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005108:	4b45      	ldr	r3, [pc, #276]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005114:	4b42      	ldr	r3, [pc, #264]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	493f      	ldr	r1, [pc, #252]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	628b      	str	r3, [r1, #40]	; 0x28
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	025b      	lsls	r3, r3, #9
 800513a:	b29b      	uxth	r3, r3
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	3b01      	subs	r3, #1
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005158:	4931      	ldr	r1, [pc, #196]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f023 0220 	bic.w	r2, r3, #32
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4928      	ldr	r1, [pc, #160]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005182:	4b27      	ldr	r3, [pc, #156]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005188:	f023 0310 	bic.w	r3, r3, #16
 800518c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 8005190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <RCCEx_PLL2_Config+0x160>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69d2      	ldr	r2, [r2, #28]
 800519a:	00d2      	lsls	r2, r2, #3
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	f043 0310 	orr.w	r3, r3, #16
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a19      	ldr	r2, [pc, #100]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c0:	e00f      	b.n	80051e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d4:	e005      	b.n	80051e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ee:	f7fc fa2b 	bl	8001648 <HAL_GetTick>
 80051f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051f4:	e008      	b.n	8005208 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051f6:	f7fc fa27 	bl	8001648 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <RCCEx_PLL2_Config+0x15c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	ffff0007 	.word	0xffff0007

08005228 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005236:	4b53      	ldr	r3, [pc, #332]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b03      	cmp	r3, #3
 8005240:	d101      	bne.n	8005246 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e099      	b.n	800537a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005246:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a4e      	ldr	r2, [pc, #312]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800524c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005252:	f7fc f9f9 	bl	8001648 <HAL_GetTick>
 8005256:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005258:	e008      	b.n	800526c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800525a:	f7fc f9f5 	bl	8001648 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e086      	b.n	800537a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800526c:	4b45      	ldr	r3, [pc, #276]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005278:	4b42      	ldr	r3, [pc, #264]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	051b      	lsls	r3, r3, #20
 8005286:	493f      	ldr	r1, [pc, #252]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	628b      	str	r3, [r1, #40]	; 0x28
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	3b01      	subs	r3, #1
 8005292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	3b01      	subs	r3, #1
 800529c:	025b      	lsls	r3, r3, #9
 800529e:	b29b      	uxth	r3, r3
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	061b      	lsls	r3, r3, #24
 80052b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052bc:	4931      	ldr	r1, [pc, #196]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	492d      	ldr	r1, [pc, #180]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052d4:	4b2b      	ldr	r3, [pc, #172]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	4928      	ldr	r1, [pc, #160]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	4a26      	ldr	r2, [pc, #152]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052f2:	4b24      	ldr	r3, [pc, #144]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <RCCEx_PLL3_Config+0x160>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	69d2      	ldr	r2, [r2, #28]
 80052fe:	00d2      	lsls	r2, r2, #3
 8005300:	4920      	ldr	r1, [pc, #128]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005306:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800530c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800531e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005322:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005324:	e00f      	b.n	8005346 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d106      	bne.n	800533a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800532c:	4b15      	ldr	r3, [pc, #84]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005336:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005338:	e005      	b.n	8005346 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	4a11      	ldr	r2, [pc, #68]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005344:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005352:	f7fc f979 	bl	8001648 <HAL_GetTick>
 8005356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005358:	e008      	b.n	800536c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800535a:	f7fc f975 	bl	8001648 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e006      	b.n	800537a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <RCCEx_PLL3_Config+0x15c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	58024400 	.word	0x58024400
 8005388:	ffff0007 	.word	0xffff0007

0800538c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e042      	b.n	8005424 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fb ff6b 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2224      	movs	r2, #36	; 0x24
 80053ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 f9f6 	bl	80067c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fc8b 	bl	8005cf8 <UART_SetConfig>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e01b      	b.n	8005424 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800540a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 fa75 	bl	800690c <UART_CheckIdleState>
 8005422:	4603      	mov	r3, r0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	2b20      	cmp	r3, #32
 8005444:	d17b      	bne.n	800553e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_UART_Transmit+0x26>
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e074      	b.n	8005540 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2221      	movs	r2, #33	; 0x21
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005466:	f7fc f8ef 	bl	8001648 <HAL_GetTick>
 800546a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005484:	d108      	bne.n	8005498 <HAL_UART_Transmit+0x6c>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	e003      	b.n	80054a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054a0:	e030      	b.n	8005504 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2180      	movs	r1, #128	; 0x80
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f001 fad7 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e03d      	b.n	8005540 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	3302      	adds	r3, #2
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	e007      	b.n	80054f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1c8      	bne.n	80054a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2200      	movs	r2, #0
 8005518:	2140      	movs	r1, #64	; 0x40
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f001 faa0 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0ba      	sub	sp, #232	; 0xe8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800556e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005572:	f640 030f 	movw	r3, #2063	; 0x80f
 8005576:	4013      	ands	r3, r2
 8005578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800557c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11b      	bne.n	80055bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800559c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8377 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
      }
      return;
 80055ba:	e371      	b.n	8005ca0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8123 	beq.w	800580c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80055ca:	4b8d      	ldr	r3, [pc, #564]	; (8005800 <HAL_UART_IRQHandler+0x2b8>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055d6:	4b8b      	ldr	r3, [pc, #556]	; (8005804 <HAL_UART_IRQHandler+0x2bc>)
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8116 	beq.w	800580c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0xc8>
 80055ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2201      	movs	r2, #1
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d011      	beq.n	8005640 <HAL_UART_IRQHandler+0xf8>
 800561c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <HAL_UART_IRQHandler+0x128>
 800564c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2204      	movs	r2, #4
 800565e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f043 0202 	orr.w	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d017      	beq.n	80056ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005688:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800568c:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <HAL_UART_IRQHandler+0x2b8>)
 800568e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2208      	movs	r2, #8
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f043 0208 	orr.w	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <HAL_UART_IRQHandler+0x196>
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 82dd 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d013      	beq.n	800571e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800573e:	2b00      	cmp	r3, #0
 8005740:	d054      	beq.n	80057ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fb1c 	bl	8006d80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d146      	bne.n	80057e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800576c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800578e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800579a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1d9      	bne.n	8005756 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_UART_IRQHandler+0x2c0>)
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fc fb89 	bl	8001ed4 <HAL_DMA_Abort_IT>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80057d6:	4610      	mov	r0, r2
 80057d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057da:	e00f      	b.n	80057fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa81 	bl	8005ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e2:	e00b      	b.n	80057fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa7d 	bl	8005ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ea:	e007      	b.n	80057fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fa79 	bl	8005ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80057fa:	e253      	b.n	8005ca4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e251      	b.n	8005ca4 <HAL_UART_IRQHandler+0x75c>
 8005800:	10000001 	.word	0x10000001
 8005804:	04000120 	.word	0x04000120
 8005808:	08006e4d 	.word	0x08006e4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 81e7 	bne.w	8005be4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 81e0 	beq.w	8005be4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 81d9 	beq.w	8005be4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2210      	movs	r2, #16
 8005838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	f040 8151 	bne.w	8005aec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a96      	ldr	r2, [pc, #600]	; (8005aac <HAL_UART_IRQHandler+0x564>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d068      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a93      	ldr	r2, [pc, #588]	; (8005ab0 <HAL_UART_IRQHandler+0x568>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d061      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a91      	ldr	r2, [pc, #580]	; (8005ab4 <HAL_UART_IRQHandler+0x56c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d05a      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a8e      	ldr	r2, [pc, #568]	; (8005ab8 <HAL_UART_IRQHandler+0x570>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d053      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a8c      	ldr	r2, [pc, #560]	; (8005abc <HAL_UART_IRQHandler+0x574>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04c      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a89      	ldr	r2, [pc, #548]	; (8005ac0 <HAL_UART_IRQHandler+0x578>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a87      	ldr	r2, [pc, #540]	; (8005ac4 <HAL_UART_IRQHandler+0x57c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d03e      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a84      	ldr	r2, [pc, #528]	; (8005ac8 <HAL_UART_IRQHandler+0x580>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d037      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a82      	ldr	r2, [pc, #520]	; (8005acc <HAL_UART_IRQHandler+0x584>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d030      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a7f      	ldr	r2, [pc, #508]	; (8005ad0 <HAL_UART_IRQHandler+0x588>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d029      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a7d      	ldr	r2, [pc, #500]	; (8005ad4 <HAL_UART_IRQHandler+0x58c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <HAL_UART_IRQHandler+0x590>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01b      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a78      	ldr	r2, [pc, #480]	; (8005adc <HAL_UART_IRQHandler+0x594>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d014      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a75      	ldr	r2, [pc, #468]	; (8005ae0 <HAL_UART_IRQHandler+0x598>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00d      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a73      	ldr	r2, [pc, #460]	; (8005ae4 <HAL_UART_IRQHandler+0x59c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d006      	beq.n	800592a <HAL_UART_IRQHandler+0x3e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a70      	ldr	r2, [pc, #448]	; (8005ae8 <HAL_UART_IRQHandler+0x5a0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d106      	bne.n	8005938 <HAL_UART_IRQHandler+0x3f0>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	b29b      	uxth	r3, r3
 8005936:	e005      	b.n	8005944 <HAL_UART_IRQHandler+0x3fc>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005948:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 81ab 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595c:	429a      	cmp	r2, r3
 800595e:	f080 81a3 	bcs.w	8005ca8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005968:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005978:	f000 8087 	beq.w	8005a8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1da      	bne.n	800597c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e1      	bne.n	80059c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e3      	bne.n	8005a02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a58:	f023 0310 	bic.w	r3, r3, #16
 8005a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e4      	bne.n	8005a48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fb ff07 	bl	8001898 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fa fd99 	bl	80005dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aaa:	e0fd      	b.n	8005ca8 <HAL_UART_IRQHandler+0x760>
 8005aac:	40020010 	.word	0x40020010
 8005ab0:	40020028 	.word	0x40020028
 8005ab4:	40020040 	.word	0x40020040
 8005ab8:	40020058 	.word	0x40020058
 8005abc:	40020070 	.word	0x40020070
 8005ac0:	40020088 	.word	0x40020088
 8005ac4:	400200a0 	.word	0x400200a0
 8005ac8:	400200b8 	.word	0x400200b8
 8005acc:	40020410 	.word	0x40020410
 8005ad0:	40020428 	.word	0x40020428
 8005ad4:	40020440 	.word	0x40020440
 8005ad8:	40020458 	.word	0x40020458
 8005adc:	40020470 	.word	0x40020470
 8005ae0:	40020488 	.word	0x40020488
 8005ae4:	400204a0 	.word	0x400204a0
 8005ae8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80cf 	beq.w	8005cac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80ca 	beq.w	8005cac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e4      	bne.n	8005b18 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	4b55      	ldr	r3, [pc, #340]	; (8005cb8 <HAL_UART_IRQHandler+0x770>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b72:	633a      	str	r2, [r7, #48]	; 0x30
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e3      	bne.n	8005b4e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e4      	bne.n	8005b9a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fa fcfd 	bl	80005dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be2:	e063      	b.n	8005cac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <HAL_UART_IRQHandler+0x6c6>
 8005bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 fe7e 	bl	8007908 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c0c:	e051      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d03a      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
    }
    return;
 8005c42:	e035      	b.n	8005cb0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_UART_IRQHandler+0x71c>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f90b 	bl	8006e78 <UART_EndTransmit_IT>
    return;
 8005c62:	e026      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_UART_IRQHandler+0x73c>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fe57 	bl	8007930 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c82:	e016      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da0c      	bge.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fe3f 	bl	800791c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c9e:	e008      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
      return;
 8005ca0:	bf00      	nop
 8005ca2:	e006      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
    return;
 8005ca4:	bf00      	nop
 8005ca6:	e004      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
      return;
 8005ca8:	bf00      	nop
 8005caa:	e002      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
      return;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <HAL_UART_IRQHandler+0x76a>
    return;
 8005cb0:	bf00      	nop
  }
}
 8005cb2:	37e8      	adds	r7, #232	; 0xe8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	effffffe 	.word	0xeffffffe

08005cbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b092      	sub	sp, #72	; 0x48
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4bbe      	ldr	r3, [pc, #760]	; (8006020 <UART_SetConfig+0x328>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4ab3      	ldr	r2, [pc, #716]	; (8006024 <UART_SetConfig+0x32c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d60:	4313      	orrs	r3, r2
 8005d62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	4baf      	ldr	r3, [pc, #700]	; (8006028 <UART_SetConfig+0x330>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f023 010f 	bic.w	r1, r3, #15
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4aa6      	ldr	r2, [pc, #664]	; (800602c <UART_SetConfig+0x334>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d177      	bne.n	8005e88 <UART_SetConfig+0x190>
 8005d98:	4ba5      	ldr	r3, [pc, #660]	; (8006030 <UART_SetConfig+0x338>)
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da0:	2b28      	cmp	r3, #40	; 0x28
 8005da2:	d86d      	bhi.n	8005e80 <UART_SetConfig+0x188>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0xb4>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005e51 	.word	0x08005e51
 8005db0:	08005e81 	.word	0x08005e81
 8005db4:	08005e81 	.word	0x08005e81
 8005db8:	08005e81 	.word	0x08005e81
 8005dbc:	08005e81 	.word	0x08005e81
 8005dc0:	08005e81 	.word	0x08005e81
 8005dc4:	08005e81 	.word	0x08005e81
 8005dc8:	08005e81 	.word	0x08005e81
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e81 	.word	0x08005e81
 8005dd4:	08005e81 	.word	0x08005e81
 8005dd8:	08005e81 	.word	0x08005e81
 8005ddc:	08005e81 	.word	0x08005e81
 8005de0:	08005e81 	.word	0x08005e81
 8005de4:	08005e81 	.word	0x08005e81
 8005de8:	08005e81 	.word	0x08005e81
 8005dec:	08005e61 	.word	0x08005e61
 8005df0:	08005e81 	.word	0x08005e81
 8005df4:	08005e81 	.word	0x08005e81
 8005df8:	08005e81 	.word	0x08005e81
 8005dfc:	08005e81 	.word	0x08005e81
 8005e00:	08005e81 	.word	0x08005e81
 8005e04:	08005e81 	.word	0x08005e81
 8005e08:	08005e81 	.word	0x08005e81
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e81 	.word	0x08005e81
 8005e14:	08005e81 	.word	0x08005e81
 8005e18:	08005e81 	.word	0x08005e81
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	08005e81 	.word	0x08005e81
 8005e24:	08005e81 	.word	0x08005e81
 8005e28:	08005e81 	.word	0x08005e81
 8005e2c:	08005e71 	.word	0x08005e71
 8005e30:	08005e81 	.word	0x08005e81
 8005e34:	08005e81 	.word	0x08005e81
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	08005e81 	.word	0x08005e81
 8005e44:	08005e81 	.word	0x08005e81
 8005e48:	08005e81 	.word	0x08005e81
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e222      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e21e      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e21a      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6e:	e216      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e76:	e212      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7e:	e20e      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e86:	e20a      	b.n	800629e <UART_SetConfig+0x5a6>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a69      	ldr	r2, [pc, #420]	; (8006034 <UART_SetConfig+0x33c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d130      	bne.n	8005ef4 <UART_SetConfig+0x1fc>
 8005e92:	4b67      	ldr	r3, [pc, #412]	; (8006030 <UART_SetConfig+0x338>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d826      	bhi.n	8005eec <UART_SetConfig+0x1f4>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x1ac>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ebd 	.word	0x08005ebd
 8005ea8:	08005ec5 	.word	0x08005ec5
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e1ec      	b.n	800629e <UART_SetConfig+0x5a6>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e1e8      	b.n	800629e <UART_SetConfig+0x5a6>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed2:	e1e4      	b.n	800629e <UART_SetConfig+0x5a6>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eda:	e1e0      	b.n	800629e <UART_SetConfig+0x5a6>
 8005edc:	2320      	movs	r3, #32
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee2:	e1dc      	b.n	800629e <UART_SetConfig+0x5a6>
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eea:	e1d8      	b.n	800629e <UART_SetConfig+0x5a6>
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e1d4      	b.n	800629e <UART_SetConfig+0x5a6>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a4f      	ldr	r2, [pc, #316]	; (8006038 <UART_SetConfig+0x340>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d130      	bne.n	8005f60 <UART_SetConfig+0x268>
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <UART_SetConfig+0x338>)
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d826      	bhi.n	8005f58 <UART_SetConfig+0x260>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0x218>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f29 	.word	0x08005f29
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	08005f39 	.word	0x08005f39
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f49 	.word	0x08005f49
 8005f24:	08005f51 	.word	0x08005f51
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e1b6      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e1b2      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e1ae      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e1aa      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f48:	2320      	movs	r3, #32
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e1a6      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e1a2      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e19e      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a35      	ldr	r2, [pc, #212]	; (800603c <UART_SetConfig+0x344>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d130      	bne.n	8005fcc <UART_SetConfig+0x2d4>
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <UART_SetConfig+0x338>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	d826      	bhi.n	8005fc4 <UART_SetConfig+0x2cc>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x284>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fa5 	.word	0x08005fa5
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e180      	b.n	800629e <UART_SetConfig+0x5a6>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e17c      	b.n	800629e <UART_SetConfig+0x5a6>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e178      	b.n	800629e <UART_SetConfig+0x5a6>
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e174      	b.n	800629e <UART_SetConfig+0x5a6>
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e170      	b.n	800629e <UART_SetConfig+0x5a6>
 8005fbc:	2340      	movs	r3, #64	; 0x40
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e16c      	b.n	800629e <UART_SetConfig+0x5a6>
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e168      	b.n	800629e <UART_SetConfig+0x5a6>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <UART_SetConfig+0x348>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d142      	bne.n	800605c <UART_SetConfig+0x364>
 8005fd6:	4b16      	ldr	r3, [pc, #88]	; (8006030 <UART_SetConfig+0x338>)
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d838      	bhi.n	8006054 <UART_SetConfig+0x35c>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x2f0>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006001 	.word	0x08006001
 8005fec:	08006009 	.word	0x08006009
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006006:	e14a      	b.n	800629e <UART_SetConfig+0x5a6>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600e:	e146      	b.n	800629e <UART_SetConfig+0x5a6>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e142      	b.n	800629e <UART_SetConfig+0x5a6>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e13e      	b.n	800629e <UART_SetConfig+0x5a6>
 8006020:	cfff69f3 	.word	0xcfff69f3
 8006024:	58000c00 	.word	0x58000c00
 8006028:	11fff4ff 	.word	0x11fff4ff
 800602c:	40011000 	.word	0x40011000
 8006030:	58024400 	.word	0x58024400
 8006034:	40004400 	.word	0x40004400
 8006038:	40004800 	.word	0x40004800
 800603c:	40004c00 	.word	0x40004c00
 8006040:	40005000 	.word	0x40005000
 8006044:	2320      	movs	r3, #32
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604a:	e128      	b.n	800629e <UART_SetConfig+0x5a6>
 800604c:	2340      	movs	r3, #64	; 0x40
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006052:	e124      	b.n	800629e <UART_SetConfig+0x5a6>
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605a:	e120      	b.n	800629e <UART_SetConfig+0x5a6>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4acb      	ldr	r2, [pc, #812]	; (8006390 <UART_SetConfig+0x698>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d176      	bne.n	8006154 <UART_SetConfig+0x45c>
 8006066:	4bcb      	ldr	r3, [pc, #812]	; (8006394 <UART_SetConfig+0x69c>)
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606e:	2b28      	cmp	r3, #40	; 0x28
 8006070:	d86c      	bhi.n	800614c <UART_SetConfig+0x454>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x380>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	0800611d 	.word	0x0800611d
 800607c:	0800614d 	.word	0x0800614d
 8006080:	0800614d 	.word	0x0800614d
 8006084:	0800614d 	.word	0x0800614d
 8006088:	0800614d 	.word	0x0800614d
 800608c:	0800614d 	.word	0x0800614d
 8006090:	0800614d 	.word	0x0800614d
 8006094:	0800614d 	.word	0x0800614d
 8006098:	08006125 	.word	0x08006125
 800609c:	0800614d 	.word	0x0800614d
 80060a0:	0800614d 	.word	0x0800614d
 80060a4:	0800614d 	.word	0x0800614d
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800614d 	.word	0x0800614d
 80060b0:	0800614d 	.word	0x0800614d
 80060b4:	0800614d 	.word	0x0800614d
 80060b8:	0800612d 	.word	0x0800612d
 80060bc:	0800614d 	.word	0x0800614d
 80060c0:	0800614d 	.word	0x0800614d
 80060c4:	0800614d 	.word	0x0800614d
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	0800614d 	.word	0x0800614d
 80060d0:	0800614d 	.word	0x0800614d
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	08006135 	.word	0x08006135
 80060dc:	0800614d 	.word	0x0800614d
 80060e0:	0800614d 	.word	0x0800614d
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800614d 	.word	0x0800614d
 8006110:	0800614d 	.word	0x0800614d
 8006114:	0800614d 	.word	0x0800614d
 8006118:	08006145 	.word	0x08006145
 800611c:	2301      	movs	r3, #1
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e0bc      	b.n	800629e <UART_SetConfig+0x5a6>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e0b8      	b.n	800629e <UART_SetConfig+0x5a6>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e0b4      	b.n	800629e <UART_SetConfig+0x5a6>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613a:	e0b0      	b.n	800629e <UART_SetConfig+0x5a6>
 800613c:	2320      	movs	r3, #32
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006142:	e0ac      	b.n	800629e <UART_SetConfig+0x5a6>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614a:	e0a8      	b.n	800629e <UART_SetConfig+0x5a6>
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006152:	e0a4      	b.n	800629e <UART_SetConfig+0x5a6>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a8f      	ldr	r2, [pc, #572]	; (8006398 <UART_SetConfig+0x6a0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d130      	bne.n	80061c0 <UART_SetConfig+0x4c8>
 800615e:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <UART_SetConfig+0x69c>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b05      	cmp	r3, #5
 8006168:	d826      	bhi.n	80061b8 <UART_SetConfig+0x4c0>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x478>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006189 	.word	0x08006189
 8006174:	08006191 	.word	0x08006191
 8006178:	08006199 	.word	0x08006199
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e086      	b.n	800629e <UART_SetConfig+0x5a6>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e082      	b.n	800629e <UART_SetConfig+0x5a6>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e07e      	b.n	800629e <UART_SetConfig+0x5a6>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e07a      	b.n	800629e <UART_SetConfig+0x5a6>
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e076      	b.n	800629e <UART_SetConfig+0x5a6>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e072      	b.n	800629e <UART_SetConfig+0x5a6>
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e06e      	b.n	800629e <UART_SetConfig+0x5a6>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a75      	ldr	r2, [pc, #468]	; (800639c <UART_SetConfig+0x6a4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d130      	bne.n	800622c <UART_SetConfig+0x534>
 80061ca:	4b72      	ldr	r3, [pc, #456]	; (8006394 <UART_SetConfig+0x69c>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d826      	bhi.n	8006224 <UART_SetConfig+0x52c>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x4e4>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	08006205 	.word	0x08006205
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e050      	b.n	800629e <UART_SetConfig+0x5a6>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e04c      	b.n	800629e <UART_SetConfig+0x5a6>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e048      	b.n	800629e <UART_SetConfig+0x5a6>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e044      	b.n	800629e <UART_SetConfig+0x5a6>
 8006214:	2320      	movs	r3, #32
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e040      	b.n	800629e <UART_SetConfig+0x5a6>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e03c      	b.n	800629e <UART_SetConfig+0x5a6>
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e038      	b.n	800629e <UART_SetConfig+0x5a6>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5b      	ldr	r2, [pc, #364]	; (80063a0 <UART_SetConfig+0x6a8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d130      	bne.n	8006298 <UART_SetConfig+0x5a0>
 8006236:	4b57      	ldr	r3, [pc, #348]	; (8006394 <UART_SetConfig+0x69c>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b05      	cmp	r3, #5
 8006240:	d826      	bhi.n	8006290 <UART_SetConfig+0x598>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x550>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006261 	.word	0x08006261
 800624c:	08006269 	.word	0x08006269
 8006250:	08006271 	.word	0x08006271
 8006254:	08006279 	.word	0x08006279
 8006258:	08006281 	.word	0x08006281
 800625c:	08006289 	.word	0x08006289
 8006260:	2302      	movs	r3, #2
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e01a      	b.n	800629e <UART_SetConfig+0x5a6>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e016      	b.n	800629e <UART_SetConfig+0x5a6>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e012      	b.n	800629e <UART_SetConfig+0x5a6>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e00e      	b.n	800629e <UART_SetConfig+0x5a6>
 8006280:	2320      	movs	r3, #32
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e00a      	b.n	800629e <UART_SetConfig+0x5a6>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e006      	b.n	800629e <UART_SetConfig+0x5a6>
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e002      	b.n	800629e <UART_SetConfig+0x5a6>
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a3f      	ldr	r2, [pc, #252]	; (80063a0 <UART_SetConfig+0x6a8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	f040 80f8 	bne.w	800649a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	dc46      	bgt.n	8006340 <UART_SetConfig+0x648>
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	f2c0 8082 	blt.w	80063bc <UART_SetConfig+0x6c4>
 80062b8:	3b02      	subs	r3, #2
 80062ba:	2b1e      	cmp	r3, #30
 80062bc:	d87e      	bhi.n	80063bc <UART_SetConfig+0x6c4>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x5cc>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	08006347 	.word	0x08006347
 80062c8:	080063bd 	.word	0x080063bd
 80062cc:	0800634f 	.word	0x0800634f
 80062d0:	080063bd 	.word	0x080063bd
 80062d4:	080063bd 	.word	0x080063bd
 80062d8:	080063bd 	.word	0x080063bd
 80062dc:	0800635f 	.word	0x0800635f
 80062e0:	080063bd 	.word	0x080063bd
 80062e4:	080063bd 	.word	0x080063bd
 80062e8:	080063bd 	.word	0x080063bd
 80062ec:	080063bd 	.word	0x080063bd
 80062f0:	080063bd 	.word	0x080063bd
 80062f4:	080063bd 	.word	0x080063bd
 80062f8:	080063bd 	.word	0x080063bd
 80062fc:	0800636f 	.word	0x0800636f
 8006300:	080063bd 	.word	0x080063bd
 8006304:	080063bd 	.word	0x080063bd
 8006308:	080063bd 	.word	0x080063bd
 800630c:	080063bd 	.word	0x080063bd
 8006310:	080063bd 	.word	0x080063bd
 8006314:	080063bd 	.word	0x080063bd
 8006318:	080063bd 	.word	0x080063bd
 800631c:	080063bd 	.word	0x080063bd
 8006320:	080063bd 	.word	0x080063bd
 8006324:	080063bd 	.word	0x080063bd
 8006328:	080063bd 	.word	0x080063bd
 800632c:	080063bd 	.word	0x080063bd
 8006330:	080063bd 	.word	0x080063bd
 8006334:	080063bd 	.word	0x080063bd
 8006338:	080063bd 	.word	0x080063bd
 800633c:	080063af 	.word	0x080063af
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d037      	beq.n	80063b4 <UART_SetConfig+0x6bc>
 8006344:	e03a      	b.n	80063bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006346:	f7fe fbff 	bl	8004b48 <HAL_RCCEx_GetD3PCLK1Freq>
 800634a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800634c:	e03c      	b.n	80063c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800634e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fc0e 	bl	8004b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800635c:	e034      	b.n	80063c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800635e:	f107 0318 	add.w	r3, r7, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fd5a 	bl	8004e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800636c:	e02c      	b.n	80063c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <UART_SetConfig+0x69c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <UART_SetConfig+0x69c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	08db      	lsrs	r3, r3, #3
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	4a07      	ldr	r2, [pc, #28]	; (80063a4 <UART_SetConfig+0x6ac>)
 8006386:	fa22 f303 	lsr.w	r3, r2, r3
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800638c:	e01c      	b.n	80063c8 <UART_SetConfig+0x6d0>
 800638e:	bf00      	nop
 8006390:	40011400 	.word	0x40011400
 8006394:	58024400 	.word	0x58024400
 8006398:	40007800 	.word	0x40007800
 800639c:	40007c00 	.word	0x40007c00
 80063a0:	58000c00 	.word	0x58000c00
 80063a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80063a8:	4b9d      	ldr	r3, [pc, #628]	; (8006620 <UART_SetConfig+0x928>)
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ac:	e00c      	b.n	80063c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063ae:	4b9d      	ldr	r3, [pc, #628]	; (8006624 <UART_SetConfig+0x92c>)
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b2:	e009      	b.n	80063c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ba:	e005      	b.n	80063c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 81de 	beq.w	800678c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	4a94      	ldr	r2, [pc, #592]	; (8006628 <UART_SetConfig+0x930>)
 80063d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063da:	461a      	mov	r2, r3
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	fbb3 f3f2 	udiv	r3, r3, r2
 80063e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4413      	add	r3, r2
 80063ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d305      	bcc.n	8006400 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d903      	bls.n	8006408 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006406:	e1c1      	b.n	800678c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640a:	2200      	movs	r2, #0
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	60fa      	str	r2, [r7, #12]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	4a84      	ldr	r2, [pc, #528]	; (8006628 <UART_SetConfig+0x930>)
 8006416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800641a:	b29b      	uxth	r3, r3
 800641c:	2200      	movs	r2, #0
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800642a:	f7f9 ff55 	bl	80002d8 <__aeabi_uldivmod>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	020b      	lsls	r3, r1, #8
 8006440:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006444:	0202      	lsls	r2, r0, #8
 8006446:	6979      	ldr	r1, [r7, #20]
 8006448:	6849      	ldr	r1, [r1, #4]
 800644a:	0849      	lsrs	r1, r1, #1
 800644c:	2000      	movs	r0, #0
 800644e:	460c      	mov	r4, r1
 8006450:	4605      	mov	r5, r0
 8006452:	eb12 0804 	adds.w	r8, r2, r4
 8006456:	eb43 0905 	adc.w	r9, r3, r5
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	469a      	mov	sl, r3
 8006462:	4693      	mov	fp, r2
 8006464:	4652      	mov	r2, sl
 8006466:	465b      	mov	r3, fp
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	f7f9 ff34 	bl	80002d8 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4613      	mov	r3, r2
 8006476:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647e:	d308      	bcc.n	8006492 <UART_SetConfig+0x79a>
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006486:	d204      	bcs.n	8006492 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	e17c      	b.n	800678c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006498:	e178      	b.n	800678c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a2:	f040 80c5 	bne.w	8006630 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80064a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	dc48      	bgt.n	8006540 <UART_SetConfig+0x848>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db7b      	blt.n	80065aa <UART_SetConfig+0x8b2>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d879      	bhi.n	80065aa <UART_SetConfig+0x8b2>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x7c4>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	08006547 	.word	0x08006547
 80064c0:	0800654f 	.word	0x0800654f
 80064c4:	080065ab 	.word	0x080065ab
 80064c8:	080065ab 	.word	0x080065ab
 80064cc:	08006557 	.word	0x08006557
 80064d0:	080065ab 	.word	0x080065ab
 80064d4:	080065ab 	.word	0x080065ab
 80064d8:	080065ab 	.word	0x080065ab
 80064dc:	08006567 	.word	0x08006567
 80064e0:	080065ab 	.word	0x080065ab
 80064e4:	080065ab 	.word	0x080065ab
 80064e8:	080065ab 	.word	0x080065ab
 80064ec:	080065ab 	.word	0x080065ab
 80064f0:	080065ab 	.word	0x080065ab
 80064f4:	080065ab 	.word	0x080065ab
 80064f8:	080065ab 	.word	0x080065ab
 80064fc:	08006577 	.word	0x08006577
 8006500:	080065ab 	.word	0x080065ab
 8006504:	080065ab 	.word	0x080065ab
 8006508:	080065ab 	.word	0x080065ab
 800650c:	080065ab 	.word	0x080065ab
 8006510:	080065ab 	.word	0x080065ab
 8006514:	080065ab 	.word	0x080065ab
 8006518:	080065ab 	.word	0x080065ab
 800651c:	080065ab 	.word	0x080065ab
 8006520:	080065ab 	.word	0x080065ab
 8006524:	080065ab 	.word	0x080065ab
 8006528:	080065ab 	.word	0x080065ab
 800652c:	080065ab 	.word	0x080065ab
 8006530:	080065ab 	.word	0x080065ab
 8006534:	080065ab 	.word	0x080065ab
 8006538:	080065ab 	.word	0x080065ab
 800653c:	0800659d 	.word	0x0800659d
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d02e      	beq.n	80065a2 <UART_SetConfig+0x8aa>
 8006544:	e031      	b.n	80065aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006546:	f7fd f8c9 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 800654a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800654c:	e033      	b.n	80065b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800654e:	f7fd f8db 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8006552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006554:	e02f      	b.n	80065b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fb0a 	bl	8004b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006564:	e027      	b.n	80065b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006566:	f107 0318 	add.w	r3, r7, #24
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fc56 	bl	8004e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006574:	e01f      	b.n	80065b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006576:	4b2d      	ldr	r3, [pc, #180]	; (800662c <UART_SetConfig+0x934>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006582:	4b2a      	ldr	r3, [pc, #168]	; (800662c <UART_SetConfig+0x934>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	4a24      	ldr	r2, [pc, #144]	; (8006620 <UART_SetConfig+0x928>)
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006594:	e00f      	b.n	80065b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <UART_SetConfig+0x928>)
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659a:	e00c      	b.n	80065b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800659c:	4b21      	ldr	r3, [pc, #132]	; (8006624 <UART_SetConfig+0x92c>)
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a0:	e009      	b.n	80065b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80e7 	beq.w	800678c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4a19      	ldr	r2, [pc, #100]	; (8006628 <UART_SetConfig+0x930>)
 80065c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d0:	005a      	lsls	r2, r3, #1
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	441a      	add	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d916      	bls.n	8006618 <UART_SetConfig+0x920>
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d212      	bcs.n	8006618 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f023 030f 	bic.w	r3, r3, #15
 80065fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	b29a      	uxth	r2, r3
 8006608:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800660a:	4313      	orrs	r3, r2
 800660c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	e0b9      	b.n	800678c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800661e:	e0b5      	b.n	800678c <UART_SetConfig+0xa94>
 8006620:	03d09000 	.word	0x03d09000
 8006624:	003d0900 	.word	0x003d0900
 8006628:	08007eec 	.word	0x08007eec
 800662c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006630:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006634:	2b20      	cmp	r3, #32
 8006636:	dc49      	bgt.n	80066cc <UART_SetConfig+0x9d4>
 8006638:	2b00      	cmp	r3, #0
 800663a:	db7c      	blt.n	8006736 <UART_SetConfig+0xa3e>
 800663c:	2b20      	cmp	r3, #32
 800663e:	d87a      	bhi.n	8006736 <UART_SetConfig+0xa3e>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x950>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	080066d3 	.word	0x080066d3
 800664c:	080066db 	.word	0x080066db
 8006650:	08006737 	.word	0x08006737
 8006654:	08006737 	.word	0x08006737
 8006658:	080066e3 	.word	0x080066e3
 800665c:	08006737 	.word	0x08006737
 8006660:	08006737 	.word	0x08006737
 8006664:	08006737 	.word	0x08006737
 8006668:	080066f3 	.word	0x080066f3
 800666c:	08006737 	.word	0x08006737
 8006670:	08006737 	.word	0x08006737
 8006674:	08006737 	.word	0x08006737
 8006678:	08006737 	.word	0x08006737
 800667c:	08006737 	.word	0x08006737
 8006680:	08006737 	.word	0x08006737
 8006684:	08006737 	.word	0x08006737
 8006688:	08006703 	.word	0x08006703
 800668c:	08006737 	.word	0x08006737
 8006690:	08006737 	.word	0x08006737
 8006694:	08006737 	.word	0x08006737
 8006698:	08006737 	.word	0x08006737
 800669c:	08006737 	.word	0x08006737
 80066a0:	08006737 	.word	0x08006737
 80066a4:	08006737 	.word	0x08006737
 80066a8:	08006737 	.word	0x08006737
 80066ac:	08006737 	.word	0x08006737
 80066b0:	08006737 	.word	0x08006737
 80066b4:	08006737 	.word	0x08006737
 80066b8:	08006737 	.word	0x08006737
 80066bc:	08006737 	.word	0x08006737
 80066c0:	08006737 	.word	0x08006737
 80066c4:	08006737 	.word	0x08006737
 80066c8:	08006729 	.word	0x08006729
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d02e      	beq.n	800672e <UART_SetConfig+0xa36>
 80066d0:	e031      	b.n	8006736 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d2:	f7fd f803 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 80066d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066d8:	e033      	b.n	8006742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066da:	f7fd f815 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 80066de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066e0:	e02f      	b.n	8006742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fa44 	bl	8004b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f0:	e027      	b.n	8006742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066f2:	f107 0318 	add.w	r3, r7, #24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fb90 	bl	8004e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006700:	e01f      	b.n	8006742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006702:	4b2d      	ldr	r3, [pc, #180]	; (80067b8 <UART_SetConfig+0xac0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800670e:	4b2a      	ldr	r3, [pc, #168]	; (80067b8 <UART_SetConfig+0xac0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <UART_SetConfig+0xac4>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006720:	e00f      	b.n	8006742 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006722:	4b26      	ldr	r3, [pc, #152]	; (80067bc <UART_SetConfig+0xac4>)
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006726:	e00c      	b.n	8006742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006728:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <UART_SetConfig+0xac8>)
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006734:	e005      	b.n	8006742 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006740:	bf00      	nop
    }

    if (pclk != 0U)
 8006742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d021      	beq.n	800678c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <UART_SetConfig+0xacc>)
 800674e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006752:	461a      	mov	r2, r3
 8006754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006756:	fbb3 f2f2 	udiv	r2, r3, r2
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	441a      	add	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	fbb2 f3f3 	udiv	r3, r2, r3
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d909      	bls.n	8006786 <UART_SetConfig+0xa8e>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d205      	bcs.n	8006786 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	b29a      	uxth	r2, r3
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	e002      	b.n	800678c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2201      	movs	r2, #1
 8006790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2201      	movs	r2, #1
 8006798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2200      	movs	r2, #0
 80067a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3748      	adds	r7, #72	; 0x48
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
 80067bc:	03d09000 	.word	0x03d09000
 80067c0:	003d0900 	.word	0x003d0900
 80067c4:	08007eec 	.word	0x08007eec

080067c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01a      	beq.n	80068de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c6:	d10a      	bne.n	80068de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
  }
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b098      	sub	sp, #96	; 0x60
 8006910:	af02      	add	r7, sp, #8
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800691c:	f7fa fe94 	bl	8001648 <HAL_GetTick>
 8006920:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d12f      	bne.n	8006990 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006938:	2200      	movs	r2, #0
 800693a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f88e 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d022      	beq.n	8006990 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800695e:	653b      	str	r3, [r7, #80]	; 0x50
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
 800696a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800696e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e6      	bne.n	800694a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e063      	b.n	8006a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b04      	cmp	r3, #4
 800699c:	d149      	bne.n	8006a32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800699e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a6:	2200      	movs	r2, #0
 80069a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f857 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d03c      	beq.n	8006a32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	623b      	str	r3, [r7, #32]
   return(result);
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
 80069d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e6      	bne.n	80069b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a0a:	61fa      	str	r2, [r7, #28]
 8006a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	69b9      	ldr	r1, [r7, #24]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	617b      	str	r3, [r7, #20]
   return(result);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e012      	b.n	8006a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3758      	adds	r7, #88	; 0x58
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a70:	e04f      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d04b      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fa fde5 	bl	8001648 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e04e      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d037      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b80      	cmp	r3, #128	; 0x80
 8006aa6:	d034      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d031      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d110      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f95b 	bl	8006d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2208      	movs	r2, #8
 8006ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e029      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aec:	d111      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f941 	bl	8006d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e00f      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d0a0      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b0a3      	sub	sp, #140	; 0x8c
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6e:	d10e      	bne.n	8006b8e <UART_Start_Receive_IT+0x52>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <UART_Start_Receive_IT+0x48>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b82:	e02d      	b.n	8006be0 <UART_Start_Receive_IT+0xa4>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	22ff      	movs	r2, #255	; 0xff
 8006b88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b8c:	e028      	b.n	8006be0 <UART_Start_Receive_IT+0xa4>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10d      	bne.n	8006bb2 <UART_Start_Receive_IT+0x76>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <UART_Start_Receive_IT+0x6c>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	22ff      	movs	r2, #255	; 0xff
 8006ba2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ba6:	e01b      	b.n	8006be0 <UART_Start_Receive_IT+0xa4>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	227f      	movs	r2, #127	; 0x7f
 8006bac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bb0:	e016      	b.n	8006be0 <UART_Start_Receive_IT+0xa4>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bba:	d10d      	bne.n	8006bd8 <UART_Start_Receive_IT+0x9c>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <UART_Start_Receive_IT+0x92>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	227f      	movs	r2, #127	; 0x7f
 8006bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bcc:	e008      	b.n	8006be0 <UART_Start_Receive_IT+0xa4>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	223f      	movs	r2, #63	; 0x3f
 8006bd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bd6:	e003      	b.n	8006be0 <UART_Start_Receive_IT+0xa4>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2222      	movs	r2, #34	; 0x22
 8006bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006c14:	673a      	str	r2, [r7, #112]	; 0x70
 8006c16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006c1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e3      	bne.n	8006bf0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c30:	d14f      	bne.n	8006cd2 <UART_Start_Receive_IT+0x196>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c38:	88fa      	ldrh	r2, [r7, #6]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d349      	bcc.n	8006cd2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	d107      	bne.n	8006c58 <UART_Start_Receive_IT+0x11c>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a47      	ldr	r2, [pc, #284]	; (8006d70 <UART_Start_Receive_IT+0x234>)
 8006c54:	675a      	str	r2, [r3, #116]	; 0x74
 8006c56:	e002      	b.n	8006c5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a46      	ldr	r2, [pc, #280]	; (8006d74 <UART_Start_Receive_IT+0x238>)
 8006c5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01a      	beq.n	8006c9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e4      	bne.n	8006c66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e5      	bne.n	8006c9c <UART_Start_Receive_IT+0x160>
 8006cd0:	e046      	b.n	8006d60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cda:	d107      	bne.n	8006cec <UART_Start_Receive_IT+0x1b0>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a24      	ldr	r2, [pc, #144]	; (8006d78 <UART_Start_Receive_IT+0x23c>)
 8006ce8:	675a      	str	r2, [r3, #116]	; 0x74
 8006cea:	e002      	b.n	8006cf2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a23      	ldr	r2, [pc, #140]	; (8006d7c <UART_Start_Receive_IT+0x240>)
 8006cf0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d019      	beq.n	8006d2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d0e:	677b      	str	r3, [r7, #116]	; 0x74
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_Start_Receive_IT+0x1be>
 8006d2c:	e018      	b.n	8006d60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f043 0320 	orr.w	r3, r3, #32
 8006d42:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d4c:	623b      	str	r3, [r7, #32]
 8006d4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	69f9      	ldr	r1, [r7, #28]
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e6      	bne.n	8006d2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	378c      	adds	r7, #140	; 0x8c
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	080075a1 	.word	0x080075a1
 8006d74:	08007241 	.word	0x08007241
 8006d78:	08007089 	.word	0x08007089
 8006d7c:	08006ed1 	.word	0x08006ed1

08006d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b095      	sub	sp, #84	; 0x54
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	643b      	str	r3, [r7, #64]	; 0x40
 8006da8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e6      	bne.n	8006d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	4b1e      	ldr	r3, [pc, #120]	; (8006e48 <UART_EndRxTransfer+0xc8>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d118      	bne.n	8006e28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f023 0310 	bic.w	r3, r3, #16
 8006e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6979      	ldr	r1, [r7, #20]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	613b      	str	r3, [r7, #16]
   return(result);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006e3c:	bf00      	nop
 8006e3e:	3754      	adds	r7, #84	; 0x54
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	effffffe 	.word	0xeffffffe

08006e4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7fe ff3a 	bl	8005ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fe fefb 	bl	8005cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec6:	bf00      	nop
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b09c      	sub	sp, #112	; 0x70
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ede:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee8:	2b22      	cmp	r3, #34	; 0x22
 8006eea:	f040 80be 	bne.w	800706a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ef8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006efc:	b2d9      	uxtb	r1, r3
 8006efe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f08:	400a      	ands	r2, r1
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 80a1 	bne.w	800707a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e6      	bne.n	8006f38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	667b      	str	r3, [r7, #100]	; 0x64
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a33      	ldr	r2, [pc, #204]	; (8007084 <UART_RxISR_8BIT+0x1b4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01f      	beq.n	8006ffc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d018      	beq.n	8006ffc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fde:	663b      	str	r3, [r7, #96]	; 0x60
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e6      	bne.n	8006fca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d12e      	bne.n	8007062 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	60fb      	str	r3, [r7, #12]
   return(result);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0310 	bic.w	r3, r3, #16
 800701e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	69b9      	ldr	r1, [r7, #24]
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	617b      	str	r3, [r7, #20]
   return(result);
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e6      	bne.n	800700a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 0310 	and.w	r3, r3, #16
 8007046:	2b10      	cmp	r3, #16
 8007048:	d103      	bne.n	8007052 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2210      	movs	r2, #16
 8007050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7f9 fabe 	bl	80005dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007060:	e00b      	b.n	800707a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fe fe34 	bl	8005cd0 <HAL_UART_RxCpltCallback>
}
 8007068:	e007      	b.n	800707a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0208 	orr.w	r2, r2, #8
 8007078:	619a      	str	r2, [r3, #24]
}
 800707a:	bf00      	nop
 800707c:	3770      	adds	r7, #112	; 0x70
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	58000c00 	.word	0x58000c00

08007088 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b09c      	sub	sp, #112	; 0x70
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007096:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a0:	2b22      	cmp	r3, #34	; 0x22
 80070a2:	f040 80be 	bne.w	8007222 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80070b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80070ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80070be:	4013      	ands	r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 80a1 	bne.w	8007232 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007104:	667b      	str	r3, [r7, #100]	; 0x64
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710e:	657b      	str	r3, [r7, #84]	; 0x54
 8007110:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e6      	bne.n	80070f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	663b      	str	r3, [r7, #96]	; 0x60
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007142:	643a      	str	r2, [r7, #64]	; 0x40
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a33      	ldr	r2, [pc, #204]	; (800723c <UART_RxISR_16BIT+0x1b4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d01f      	beq.n	80071b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d018      	beq.n	80071b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d12e      	bne.n	800721a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f023 0310 	bic.w	r3, r3, #16
 80071d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6979      	ldr	r1, [r7, #20]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	613b      	str	r3, [r7, #16]
   return(result);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e6      	bne.n	80071c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f003 0310 	and.w	r3, r3, #16
 80071fe:	2b10      	cmp	r3, #16
 8007200:	d103      	bne.n	800720a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7f9 f9e2 	bl	80005dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007218:	e00b      	b.n	8007232 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fe fd58 	bl	8005cd0 <HAL_UART_RxCpltCallback>
}
 8007220:	e007      	b.n	8007232 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0208 	orr.w	r2, r2, #8
 8007230:	619a      	str	r2, [r3, #24]
}
 8007232:	bf00      	nop
 8007234:	3770      	adds	r7, #112	; 0x70
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	58000c00 	.word	0x58000c00

08007240 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b0ac      	sub	sp, #176	; 0xb0
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800724e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	2b22      	cmp	r3, #34	; 0x22
 8007278:	f040 8180 	bne.w	800757c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007282:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007286:	e123      	b.n	80074d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007292:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007296:	b2d9      	uxtb	r1, r3
 8007298:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800729c:	b2da      	uxtb	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a2:	400a      	ands	r2, r1
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d053      	beq.n	8007382 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d011      	beq.n	800730a <UART_RxISR_8BIT_FIFOEN+0xca>
 80072e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2201      	movs	r2, #1
 80072f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f043 0201 	orr.w	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800730a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d011      	beq.n	800733a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00b      	beq.n	800733a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2202      	movs	r2, #2
 8007328:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007330:	f043 0204 	orr.w	r2, r3, #4
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800733a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d011      	beq.n	800736a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2204      	movs	r2, #4
 8007358:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007360:	f043 0202 	orr.w	r2, r3, #2
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	2b00      	cmp	r3, #0
 8007372:	d006      	beq.n	8007382 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fe fcb5 	bl	8005ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 80a0 	bne.w	80074d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80073b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80073c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e4      	bne.n	8007390 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80073d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073d8:	4b6e      	ldr	r3, [pc, #440]	; (8007594 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80073da:	4013      	ands	r3, r2
 80073dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3308      	adds	r3, #8
 80073e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80073ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80073f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80073f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e3      	bne.n	80073c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a60      	ldr	r2, [pc, #384]	; (8007598 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d021      	beq.n	8007460 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01a      	beq.n	8007460 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800743a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800743e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800744c:	657b      	str	r3, [r7, #84]	; 0x54
 800744e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007452:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e4      	bne.n	800742a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d130      	bne.n	80074ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	f023 0310 	bic.w	r3, r3, #16
 8007482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007490:	643b      	str	r3, [r7, #64]	; 0x40
 8007492:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e4      	bne.n	800746e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f003 0310 	and.w	r3, r3, #16
 80074ae:	2b10      	cmp	r3, #16
 80074b0:	d103      	bne.n	80074ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2210      	movs	r2, #16
 80074b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7f9 f88a 	bl	80005dc <HAL_UARTEx_RxEventCallback>
 80074c8:	e002      	b.n	80074d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fe fc00 	bl	8005cd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80074d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f aed1 	bne.w	8007288 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d049      	beq.n	800758c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007502:	429a      	cmp	r2, r3
 8007504:	d242      	bcs.n	800758c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	61fb      	str	r3, [r7, #28]
   return(result);
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800752a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007542:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	60bb      	str	r3, [r7, #8]
   return(result);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f043 0320 	orr.w	r3, r3, #32
 8007558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6979      	ldr	r1, [r7, #20]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e4      	bne.n	8007544 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800757a:	e007      	b.n	800758c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0208 	orr.w	r2, r2, #8
 800758a:	619a      	str	r2, [r3, #24]
}
 800758c:	bf00      	nop
 800758e:	37b0      	adds	r7, #176	; 0xb0
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	effffffe 	.word	0xeffffffe
 8007598:	58000c00 	.word	0x58000c00
 800759c:	08006ed1 	.word	0x08006ed1

080075a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b0ae      	sub	sp, #184	; 0xb8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d6:	2b22      	cmp	r3, #34	; 0x22
 80075d8:	f040 8184 	bne.w	80078e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075e6:	e127      	b.n	8007838 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80075fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80075fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007602:	4013      	ands	r3, r2
 8007604:	b29a      	uxth	r2, r3
 8007606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800760a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007610:	1c9a      	adds	r2, r3, #2
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d053      	beq.n	80076e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800763e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <UART_RxISR_16BIT_FIFOEN+0xce>
 800764a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800764e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2201      	movs	r2, #1
 800765c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800766e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d011      	beq.n	800769e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800767a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2202      	movs	r2, #2
 800768c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007694:	f043 0204 	orr.w	r2, r3, #4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800769e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d011      	beq.n	80076ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80076aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2204      	movs	r2, #4
 80076bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	f043 0202 	orr.w	r2, r3, #2
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fe fb03 	bl	8005ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 80a2 	bne.w	8007838 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800771a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800771e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e2      	bne.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800773e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007740:	4b6e      	ldr	r3, [pc, #440]	; (80078fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007742:	4013      	ands	r3, r2
 8007744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3308      	adds	r3, #8
 800774e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007752:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007758:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e3      	bne.n	800772e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a60      	ldr	r2, [pc, #384]	; (8007900 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d021      	beq.n	80077c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01a      	beq.n	80077c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80077b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e4      	bne.n	8007792 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d130      	bne.n	8007832 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	f023 0310 	bic.w	r3, r3, #16
 80077ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077f8:	647b      	str	r3, [r7, #68]	; 0x44
 80077fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e4      	bne.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b10      	cmp	r3, #16
 8007818:	d103      	bne.n	8007822 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2210      	movs	r2, #16
 8007820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7f8 fed6 	bl	80005dc <HAL_UARTEx_RxEventCallback>
 8007830:	e002      	b.n	8007838 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fe fa4c 	bl	8005cd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007838:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	f47f aecd 	bne.w	80075e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007854:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007858:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800785c:	2b00      	cmp	r3, #0
 800785e:	d049      	beq.n	80078f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007866:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800786a:	429a      	cmp	r2, r3
 800786c:	d242      	bcs.n	80078f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	623b      	str	r3, [r7, #32]
   return(result);
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007892:	633a      	str	r2, [r7, #48]	; 0x30
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e3      	bne.n	800786e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a16      	ldr	r2, [pc, #88]	; (8007904 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80078aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f043 0320 	orr.w	r3, r3, #32
 80078c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	69b9      	ldr	r1, [r7, #24]
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	617b      	str	r3, [r7, #20]
   return(result);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e4      	bne.n	80078ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078e2:	e007      	b.n	80078f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0208 	orr.w	r2, r2, #8
 80078f2:	619a      	str	r2, [r3, #24]
}
 80078f4:	bf00      	nop
 80078f6:	37b8      	adds	r7, #184	; 0xb8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	effffffe 	.word	0xeffffffe
 8007900:	58000c00 	.word	0x58000c00
 8007904:	08007089 	.word	0x08007089

08007908 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <HAL_UARTEx_DisableFifoMode+0x16>
 8007956:	2302      	movs	r3, #2
 8007958:	e027      	b.n	80079aa <HAL_UARTEx_DisableFifoMode+0x66>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2224      	movs	r2, #36	; 0x24
 8007966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e02d      	b.n	8007a2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2224      	movs	r2, #36	; 0x24
 80079da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8a0 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e02d      	b.n	8007aa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2224      	movs	r2, #36	; 0x24
 8007a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0201 	bic.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f862 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b08c      	sub	sp, #48	; 0x30
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d13b      	bne.n	8007b44 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e034      	b.n	8007b46 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	461a      	mov	r2, r3
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff f824 	bl	8006b3c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d11d      	bne.n	8007b38 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2210      	movs	r2, #16
 8007b02:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	617b      	str	r3, [r7, #20]
   return(result);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f043 0310 	orr.w	r3, r3, #16
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
 8007b24:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6a39      	ldr	r1, [r7, #32]
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e6      	bne.n	8007b04 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8007b36:	e002      	b.n	8007b3e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8007b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b42:	e000      	b.n	8007b46 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
  }
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3730      	adds	r7, #48	; 0x30
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b70:	e031      	b.n	8007bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b72:	2310      	movs	r3, #16
 8007b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b76:	2310      	movs	r3, #16
 8007b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	0e5b      	lsrs	r3, r3, #25
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	0f5b      	lsrs	r3, r3, #29
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	7b3a      	ldrb	r2, [r7, #12]
 8007b9e:	4911      	ldr	r1, [pc, #68]	; (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ba6:	7b3a      	ldrb	r2, [r7, #12]
 8007ba8:	490f      	ldr	r1, [pc, #60]	; (8007be8 <UARTEx_SetNbDataToProcess+0x98>)
 8007baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	7b7a      	ldrb	r2, [r7, #13]
 8007bbc:	4909      	ldr	r1, [pc, #36]	; (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007bbe:	5c8a      	ldrb	r2, [r1, r2]
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bc4:	7b7a      	ldrb	r2, [r7, #13]
 8007bc6:	4908      	ldr	r1, [pc, #32]	; (8007be8 <UARTEx_SetNbDataToProcess+0x98>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	08007f04 	.word	0x08007f04
 8007be8:	08007f0c 	.word	0x08007f0c

08007bec <__libc_init_array>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	4d0d      	ldr	r5, [pc, #52]	; (8007c24 <__libc_init_array+0x38>)
 8007bf0:	4c0d      	ldr	r4, [pc, #52]	; (8007c28 <__libc_init_array+0x3c>)
 8007bf2:	1b64      	subs	r4, r4, r5
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	42a6      	cmp	r6, r4
 8007bfa:	d109      	bne.n	8007c10 <__libc_init_array+0x24>
 8007bfc:	4d0b      	ldr	r5, [pc, #44]	; (8007c2c <__libc_init_array+0x40>)
 8007bfe:	4c0c      	ldr	r4, [pc, #48]	; (8007c30 <__libc_init_array+0x44>)
 8007c00:	f000 f820 	bl	8007c44 <_init>
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	2600      	movs	r6, #0
 8007c0a:	42a6      	cmp	r6, r4
 8007c0c:	d105      	bne.n	8007c1a <__libc_init_array+0x2e>
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c14:	4798      	blx	r3
 8007c16:	3601      	adds	r6, #1
 8007c18:	e7ee      	b.n	8007bf8 <__libc_init_array+0xc>
 8007c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1e:	4798      	blx	r3
 8007c20:	3601      	adds	r6, #1
 8007c22:	e7f2      	b.n	8007c0a <__libc_init_array+0x1e>
 8007c24:	08007f1c 	.word	0x08007f1c
 8007c28:	08007f1c 	.word	0x08007f1c
 8007c2c:	08007f1c 	.word	0x08007f1c
 8007c30:	08007f20 	.word	0x08007f20

08007c34 <memset>:
 8007c34:	4402      	add	r2, r0
 8007c36:	4603      	mov	r3, r0
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d100      	bne.n	8007c3e <memset+0xa>
 8007c3c:	4770      	bx	lr
 8007c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c42:	e7f9      	b.n	8007c38 <memset+0x4>

08007c44 <_init>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr

08007c50 <_fini>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr
